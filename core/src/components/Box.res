type props;

module Style = {
  type t;

  @obj
  external make: (
    ~border: 'border=?,
    ~borderBottom: 'borderBottom=?,
    ~borderColor: 'borderColor=?,
    ~borderLeft: 'borderLeft=?,
    ~borderRadius: 'borderRadius=?,
    ~borderRight: 'borderRight=?,
    ~borderTop: 'borderTop=?,
    ~boxShadow: 'boxShadow=?,
    ~displayPrint: 'displayPrint=?,
    ~displayRaw: 'displayRaw=?,
    ~alignContent: 'alignContent=?,
    ~alignItems: 'alignItems=?,
    ~alignSelf: 'alignSelf=?,
    ~flex: 'flex=?,
    ~flexDirection: 'flexDirection=?,
    ~flexGrow: 'flexGrow=?,
    ~flexShrink: 'flexShrink=?,
    ~flexWrap: 'flexWrap=?,
    ~justifyContent: 'justifyContent=?,
    ~order: 'order=?,
    ~bgcolor: 'bgcolor=?,
    ~color: 'color=?,
    ~bottom: 'bottom=?,
    ~left: 'left=?,
    ~position: 'position=?,
    ~right: 'right=?,
    ~top: 'top=?,
    ~zIndex: 'zIndex=?,
    ~height: 'height=?,
    ~maxHeight: 'maxHeight=?,
    ~maxWidth: 'maxWidth=?,
    ~minHeight: 'minHeight=?,
    ~minWidth: 'minWidth=?,
    ~width: 'width=?,
    ~boxSizing: 'boxSizing=?,
    ~m: 'm=?,
    ~margin: 'm=?,
    ~mb: 'mb=?,
    ~marginBottom: 'mb=?,
    ~ml: 'ml=?,
    ~marginLeft: 'ml=?,
    ~mr: 'mr=?,
    ~marginRight: 'mr=?,
    ~mt: 'mt=?,
    ~marginTop: 'mt=?,
    ~mx: 'mx=?,
    ~marginX: 'mx=?,
    ~my: 'my=?,
    ~marginY: 'my=?,
    ~p: 'p=?,
    ~padding: 'p=?,
    ~pb: 'pb=?,
    ~paddingBottom: 'pb=?,
    ~pl: 'pl=?,
    ~paddingLeft: 'pl=?,
    ~pr: 'pr=?,
    ~paddingRight: 'pr=?,
    ~pt: 'pt=?,
    ~paddingTop: 'pt=?,
    ~px: 'px=?,
    ~paddingX: 'px=?,
    ~px: 'py=?,
    ~paddingY: 'py=?,
    ~fontFamily: 'fontFamily=?,
    ~fontSize: 'fontSize=?,
    ~fontWeight: 'fontWeight=?,
    ~textAlign: 'textAlign=?,
  ) => t = "";
};

external objToProps: {..} => props = "%identity";

@obj
external makeProps: (
  ~key: string=?,
  ~ref: ReactDOM.domRef=?,
  ~children: React.element,
  ~clone: bool=?,
  ~component: React.component<'componentProps>=?,
  ~border: 'border=?,
  ~borderBottom: 'borderBottom=?,
  ~borderColor: 'borderColor=?,
  ~borderLeft: 'borderLeft=?,
  ~borderRadius: 'borderRadius=?,
  ~borderRight: 'borderRight=?,
  ~borderTop: 'borderTop=?,
  ~boxShadow: 'boxShadow=?,
  ~displayPrint: 'displayPrint=?,
  ~displayRaw: 'displayRaw=?,
  ~alignContent: 'alignContent=?,
  ~alignItems: 'alignItems=?,
  ~alignSelf: 'alignSelf=?,
  ~flex: 'flex=?,
  ~flexDirection: 'flexDirection=?,
  ~flexGrow: 'flexGrow=?,
  ~flexShrink: 'flexShrink=?,
  ~flexWrap: 'flexWrap=?,
  ~justifyContent: 'justifyContent=?,
  ~order: 'order=?,
  ~bgcolor: 'bgcolor=?,
  ~color: 'color=?,
  ~bottom: 'bottom=?,
  ~left: 'left=?,
  ~position: 'position=?,
  ~right: 'right=?,
  ~top: 'top=?,
  ~zIndex: 'zIndex=?,
  ~height: 'height=?,
  ~maxHeight: 'maxHeight=?,
  ~maxWidth: 'maxWidth=?,
  ~minHeight: 'minHeight=?,
  ~minWidth: 'minWidth=?,
  ~width: 'width=?,
  ~boxSizing: 'boxSizing=?,
  ~m: 'm=?,
  ~margin: 'm=?,
  ~mb: 'mb=?,
  ~marginBottom: 'mb=?,
  ~ml: 'ml=?,
  ~marginLeft: 'ml=?,
  ~mr: 'mr=?,
  ~marginRight: 'mr=?,
  ~mt: 'mt=?,
  ~marginTop: 'mt=?,
  ~mx: 'mx=?,
  ~marginX: 'mx=?,
  ~my: 'my=?,
  ~marginY: 'my=?,
  ~p: 'p=?,
  ~padding: 'p=?,
  ~pb: 'pb=?,
  ~paddingBottom: 'pb=?,
  ~pl: 'pl=?,
  ~paddingLeft: 'pl=?,
  ~pr: 'pr=?,
  ~paddingRight: 'pr=?,
  ~pt: 'pt=?,
  ~paddingTop: 'pt=?,
  ~px: 'px=?,
  ~paddingX: 'px=?,
  ~px: 'py=?,
  ~paddingY: 'py=?,
  ~fontFamily: 'fontFamily=?,
  ~fontSize: 'fontSize=?,
  ~fontWeight: 'fontWeight=?,
  ~textAlign: 'textAlign=?,
  ~xs: Style.t=?,
  ~sm: Style.t=?,
  ~md: Style.t=?,
  ~lg: Style.t=?,
  ~xl: Style.t=?,
  // HTML aria attributes
  ~\"aria-details": string=?,
  ~\"aria-disabled": bool=?,
  ~\"aria-hidden": bool=?,
  ~\"aria-keyshortcuts": string=?,
  ~\"aria-label": string=?,
  ~\"aria-roledescription": string=?,
  ~\"aria-expanded": bool=?,
  ~\"aria-level": bool=?,
  ~\"aria-modal": bool=?,
  ~\"aria-multiline": bool=?,
  ~\"aria-multiselectable": bool=?,
  ~\"aria-placeholder": string=?,
  ~\"area-readonly": bool=?,
  ~\"aria-required": bool=?,
  ~\"aria-selected": bool=?,
  ~\"aria-sort": string=?,
  ~\"aria-valuemax": float=?,
  ~\"aria-valuemin": float=?,
  ~\"aria-valuetext": float=?,
  ~\"aria-atomic": bool=?,
  ~\"aria-busy": bool=?,
  ~\"aria-relevant": string=?,
  ~\"aria-grabbed": bool=?,
  ~\"aria-activedescendant": string=?,
  ~\"aria-colcount": int=?,
  ~\"aria-colindex": int=?,
  ~\"aria-colspan": int=?,
  ~\"aria-controls": string=?,
  ~\"aria-describedby": string=?,
  ~\"aria-errormessage": string=?,
  ~\"aria-flowto": string=?,
  ~\"aria-labelledby": string=?,
  ~\"aria-owns": string=?,
  ~\"aria-posinset": int=?,
  ~\"aria-rowcount": int=?,
  ~\"aria-rowindex": int=?,
  ~\"aria-rowspan": int=?,
  ~\"aria-setsize": int=?,
  // react textarea/input
  ~defaultChecked: bool,
  ~defaultValue: string,
  // HTML global attributes
  ~accessKey: string=?,
  ~className: string=?,
  ~contentEditable: bool=?,
  ~contextMenu: string=?,
  ~dir: string=?,
  ~draggable: bool=?,
  ~hidden: bool=?,
  ~id: string=?,
  ~lang: string=?,
  ~role: string=?,
  ~style: ReactDOM.style=?,
  ~spellCheck: bool=?,
  ~tabIndex: int=?,
  ~title: string=?,
  // HTML5 microdata
  ~itemID: string=?,
  ~itemProps: string=?,
  ~itemRef: string=?,
  ~itemScope: bool=?,
  ~itemType: string=?,
  // tag-specific html attributes
  ~accept: string,
  ~acceptCharset: string,
  ~action: string,
  ~allowFullScreen: bool,
  ~alt: string,
  ~async: bool,
  ~autoComplete: string,
  ~autoCapitalize: string,
  ~autoFocus: bool,
  ~autoPlay: bool,
  ~challenge: string,
  ~charSet: string,
  ~checked: bool,
  ~cite: string,
  ~crossOrigin: string,
  ~cols: int,
  ~colSpan: int,
  ~content: string,
  ~controls: bool,
  ~coords: string,
  ~data: string,
  ~dateTime: string,
  ~default: bool,
  ~defer: bool,
  ~disabled: bool,
  ~download: string,
  ~encType: string,
  ~form: string,
  ~formAction: string,
  ~formTarget: string,
  ~formMethod: string,
  ~headers: string,
  ~height: string,
  ~high: int,
  ~href: string,
  ~hrefLang: string,
  ~htmlFor: string,
  ~httpEquiv: string,
  ~icon: string,
  ~inputMode: string,
  ~integrity: string,
  ~keyType: string,
  ~kind: string,
  ~label: string,
  ~list: string,
  ~loop: bool,
  ~low: int,
  ~manifest: string,
  ~max: string,
  ~maxLength: int,
  ~media: string,
  ~mediaGroup: string,
  ~method: string,
  ~min: string,
  ~minLength: int,
  ~multiple: bool,
  ~muted: bool,
  ~name: string,
  ~nonce: string,
  ~noValidate: bool,
  ~\"open": bool,
  ~optimum: int,
  ~pattern: string,
  ~placeholder: string,
  ~playsInline: bool,
  ~poster: string,
  ~preload: string,
  ~radioGroup: string,
  ~readOnly: bool,
  ~rel: string,
  ~required: bool,
  ~reversed: bool,
  ~rows: int,
  ~rowSpan: int,
  ~sandbox: string,
  ~scope: string,
  ~scoped: bool,
  ~scrolling: string,
  // seamless - supported by React, but removed from the html5 spec
  ~selected: bool,
  ~shape: string,
  ~size: int,
  ~sizes: string,
  ~span: int,
  ~src: string,
  ~srcDoc: string,
  ~srcLang: string,
  ~srcSet: string,
  ~start: int,
  ~step: float,
  ~summary: string,
  ~target: string,
  ~\"type": string,
  ~useMap: string,
  ~value: string,
  ~width: string,
  ~wrap: string,
  // HTML event attributes
  ~onCopy: ReactEvent.Clipboard.t => unit=?,
  ~onCut: ReactEvent.Clipboard.t => unit=?,
  ~onPaste: ReactEvent.Clipboard.t => unit=?,
  ~onCompositionEnd: ReactEvent.Composition.t => unit=?,
  ~onCompositionStart: ReactEvent.Composition.t => unit=?,
  ~onCompositionUpdate: ReactEvent.Composition.t => unit=?,
  ~onKeyDown: ReactEvent.Keyboard.t => unit=?,
  ~onKeyPress: ReactEvent.Keyboard.t => unit=?,
  ~onKeyUp: ReactEvent.Keyboard.t => unit=?,
  ~onFocus: ReactEvent.Focus.t => unit=?,
  ~onBlur: ReactEvent.Focus.t => unit=?,
  ~onChange: ReactEvent.Form.t => unit=?,
  ~onInput: ReactEvent.Form.t => unit=?,
  ~onSubmit: ReactEvent.Form.t => unit=?,
  ~onInvalid: ReactEvent.Form.t => unit=?,
  ~onClick: ReactEvent.Mouse.t => unit=?,
  ~onContextMenu: ReactEvent.Mouse.t => unit=?,
  ~onDoubleClick: ReactEvent.Mouse.t => unit=?,
  ~onDrag: ReactEvent.Mouse.t => unit=?,
  ~onDragEnd: ReactEvent.Mouse.t => unit=?,
  ~onDragEnter: ReactEvent.Mouse.t => unit=?,
  ~onDragExit: ReactEvent.Mouse.t => unit=?,
  ~onDragLeave: ReactEvent.Mouse.t => unit=?,
  ~onDragOver: ReactEvent.Mouse.t => unit=?,
  ~onDragStart: ReactEvent.Mouse.t => unit=?,
  ~onDrop: ReactEvent.Mouse.t => unit=?,
  ~onMouseDown: ReactEvent.Mouse.t => unit=?,
  ~onMouseEnter: ReactEvent.Mouse.t => unit=?,
  ~onMouseLeave: ReactEvent.Mouse.t => unit=?,
  ~onMouseMove: ReactEvent.Mouse.t => unit=?,
  ~onMouseOut: ReactEvent.Mouse.t => unit=?,
  ~onMouseOver: ReactEvent.Mouse.t => unit=?,
  ~onMouseUp: ReactEvent.Mouse.t => unit=?,
  ~onSelect: ReactEvent.Selection.t => unit=?,
  ~onTouchCancel: ReactEvent.Touch.t => unit=?,
  ~onTouchEnd: ReactEvent.Touch.t => unit=?,
  ~onTouchMove: ReactEvent.Touch.t => unit=?,
  ~onTouchStart: ReactEvent.Touch.t => unit=?,
  ~onPointerOver: ReactEvent.Pointer.t => unit=?,
  ~onPointerEnter: ReactEvent.Pointer.t => unit=?,
  ~onPointerDown: ReactEvent.Pointer.t => unit=?,
  ~onPointerMove: ReactEvent.Pointer.t => unit=?,
  ~onPointerUp: ReactEvent.Pointer.t => unit=?,
  ~onPointerCancel: ReactEvent.Pointer.t => unit=?,
  ~onPointerOut: ReactEvent.Pointer.t => unit=?,
  ~onPointerLeave: ReactEvent.Pointer.t => unit=?,
  ~onGotPointerCapture: ReactEvent.Pointer.t => unit=?,
  ~onLostPointerCapture: ReactEvent.Pointer.t => unit=?,
  ~onScroll: ReactEvent.UI.t => unit=?,
  ~onWheel: ReactEvent.Wheel.t => unit=?,
  ~onAbort: ReactEvent.Media.t => unit=?,
  ~onCanPlay: ReactEvent.Media.t => unit=?,
  ~onCanPlayThrough: ReactEvent.Media.t => unit=?,
  ~onDurationChange: ReactEvent.Media.t => unit=?,
  ~onEmptied: ReactEvent.Media.t => unit=?,
  ~onEncrypted: ReactEvent.Media.t => unit=?,
  ~onEnded: ReactEvent.Media.t => unit=?,
  ~onError: ReactEvent.Media.t => unit=?,
  ~onLoadedData: ReactEvent.Media.t => unit=?,
  ~onLoadedMetadata: ReactEvent.Media.t => unit=?,
  ~onLoadStart: ReactEvent.Media.t => unit=?,
  ~onPause: ReactEvent.Media.t => unit=?,
  ~onPlay: ReactEvent.Media.t => unit=?,
  ~onPlaying: ReactEvent.Media.t => unit=?,
  ~onProgress: ReactEvent.Media.t => unit=?,
  ~onRateChange: ReactEvent.Media.t => unit=?,
  ~onSeeked: ReactEvent.Media.t => unit=?,
  ~onSeeking: ReactEvent.Media.t => unit=?,
  ~onStalled: ReactEvent.Media.t => unit=?,
  ~onSuspend: ReactEvent.Media.t => unit=?,
  ~onTimeUpdate: ReactEvent.Media.t => unit=?,
  ~onVolumeChange: ReactEvent.Media.t => unit=?,
  ~onWaiting: ReactEvent.Media.t => unit=?,
  ~onLoad: ReactEvent.Image.t => unit=?,
  ~onAnimationStart: ReactEvent.Animation.t => unit=?,
  ~onAnimationEnd: ReactEvent.Animation.t => unit=?,
  ~onAnimationIteration: ReactEvent.Animation.t => unit=?,
  ~onTransitionEnd: ReactEvent.Transition.t => unit=?,
  unit
) => props = "";

@module("@material-ui/core/Box")
external make: React.component<props> = "default";