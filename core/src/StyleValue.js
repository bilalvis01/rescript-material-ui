// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var StyleValueToString$Materialui = require("./StyleValueToString.js");

function num(v) {
  return {
          NAME: "num",
          VAL: v
        };
}

function ch(l) {
  return {
          NAME: "ch",
          VAL: l
        };
}

function em(l) {
  return {
          NAME: "em",
          VAL: l
        };
}

function ex(l) {
  return {
          NAME: "ex",
          VAL: l
        };
}

function rem(l) {
  return {
          NAME: "rem",
          VAL: l
        };
}

function vh(l) {
  return {
          NAME: "vh",
          VAL: l
        };
}

function vw(l) {
  return {
          NAME: "vw",
          VAL: l
        };
}

function vmin(l) {
  return {
          NAME: "vmin",
          VAL: l
        };
}

function vmax(l) {
  return {
          NAME: "vmax",
          VAL: l
        };
}

function px(l) {
  return {
          NAME: "px",
          VAL: l
        };
}

function cm(l) {
  return {
          NAME: "cm",
          VAL: l
        };
}

function mm(l) {
  return {
          NAME: "mm",
          VAL: l
        };
}

function inch(l) {
  return {
          NAME: "inch",
          VAL: l
        };
}

function pc(l) {
  return {
          NAME: "pc",
          VAL: l
        };
}

function pt(l) {
  return {
          NAME: "pt",
          VAL: l
        };
}

function pct(v) {
  return {
          NAME: "pct",
          VAL: v
        };
}

function deg(v) {
  return {
          NAME: "deg",
          VAL: v
        };
}

function grad(v) {
  return {
          NAME: "grad",
          VAL: v
        };
}

function rad(v) {
  return {
          NAME: "rad",
          VAL: v
        };
}

function turn(v) {
  return {
          NAME: "turn",
          VAL: v
        };
}

function hsl(v1, v2, v3) {
  return {
          NAME: "hsl",
          VAL: [
            v1,
            v2,
            v3
          ]
        };
}

function hsla(v1, v2, v3, v4) {
  return {
          NAME: "hsla",
          VAL: [
            v1,
            v2,
            v3,
            v4
          ]
        };
}

function rgb(v1, v2, v3) {
  return {
          NAME: "rgb",
          VAL: [
            v1,
            v2,
            v3
          ]
        };
}

function rgba(v1, v2, v3, v4) {
  return {
          NAME: "rgba",
          VAL: [
            v1,
            v2,
            v3,
            v4
          ]
        };
}

function rgbHex(v) {
  return {
          NAME: "rgbHex",
          VAL: v
        };
}

function border2(style, widthOrColor) {
  var widthOrColor$1;
  if (typeof widthOrColor === "object") {
    var variant = widthOrColor.NAME;
    widthOrColor$1 = variant === "rem" || variant === "vw" || variant === "vh" || variant === "px" || variant === "pt" || variant === "pc" || variant === "mm" || variant === "ex" || variant === "em" || variant === "cm" || variant === "ch" || variant === "vmin" || variant === "vmax" || variant === "inch" ? StyleValueToString$Materialui.lineWidth(widthOrColor) : StyleValueToString$Materialui.color(widthOrColor);
  } else {
    widthOrColor$1 = widthOrColor === "thick" || widthOrColor === "medium" || widthOrColor === "thin" ? StyleValueToString$Materialui.lineWidth(widthOrColor) : StyleValueToString$Materialui.color(widthOrColor);
  }
  return style + " " + widthOrColor$1;
}

function border3(width, style, color) {
  return StyleValueToString$Materialui.lineWidth(width) + " " + style + " " + StyleValueToString$Materialui.color(color);
}

function borderColor2(v1, v2) {
  return StyleValueToString$Materialui.borderColor(v1) + " " + StyleValueToString$Materialui.borderColor(v2);
}

function borderColor3(v1, v2, v3) {
  return StyleValueToString$Materialui.borderColor(v1) + " " + StyleValueToString$Materialui.borderColor(v2) + " " + StyleValueToString$Materialui.borderColor(v3);
}

function borderColor4(v1, v2, v3, v4) {
  return StyleValueToString$Materialui.borderColor(v1) + " " + StyleValueToString$Materialui.borderColor(v2) + " " + StyleValueToString$Materialui.borderColor(v3) + " " + StyleValueToString$Materialui.borderColor(v4);
}

exports.num = num;
exports.ch = ch;
exports.em = em;
exports.ex = ex;
exports.rem = rem;
exports.vh = vh;
exports.vw = vw;
exports.vmin = vmin;
exports.vmax = vmax;
exports.px = px;
exports.cm = cm;
exports.mm = mm;
exports.inch = inch;
exports.pc = pc;
exports.pt = pt;
exports.pct = pct;
exports.deg = deg;
exports.grad = grad;
exports.rad = rad;
exports.turn = turn;
exports.hsl = hsl;
exports.hsla = hsla;
exports.rgb = rgb;
exports.rgba = rgba;
exports.rgbHex = rgbHex;
exports.border2 = border2;
exports.border3 = border3;
exports.borderColor2 = borderColor2;
exports.borderColor3 = borderColor3;
exports.borderColor4 = borderColor4;
/* No side effect */
