open Belt;
open StyleValue.Border;
open StyleValue.Display;
open StyleValue.Flexbox;
open StyleValue.Palette;

type boxProps;

@bs.module("@material-ui/core/Box")
external box: React.component<boxProps> = "default";

type props;

type key = [
  | #border
  | #borderColor
  | #borderRadius
  | #display
  | #overflow
  | #textOverflow
  | #visibility
  | #whiteSpace
  | #flexDirection
  | #flexWrap
  | #justifyContent
  | #alignItems
  | #alignContent
  | #order
  | #flex
  | #flexGrow
  | #flexShrink
  | #alignSelf
  | #color
  | #bgcolor
];

@unboxed
type rec styleProperty =
  | StyleProperty((key, 'a)): styleProperty;

let makeStyle: array<styleProperty> = %raw(`
  styleProperties => {
    return styleProperties.reduce((style, styleProperty) => {
      style[styleProperty[0]] = styleProperty[1]
    }, {})
  }
`);

let makeBoxProps: props => boxProps = %raw(`
  ({ style, xs, sm, md, lg, xl, ...otherProps }) => {
    let boxProps = { ...makeStyle(style), ...otherProps }  

    if (xs) {
      boxProps.xs = makeStyle(xs)
    }

    if (sm) {
      boxProps.sm = makeStyle(sm)
    }

    if (md) {
      boxProps.md = makeStyle(md)
    }

    if (lg) {
      boxProps.lg = makeStyle(lg)
    }

    if (xl) {
      boxProps.xl = makeStyle(xl)
    }

    return boxProps
  }
`);

external objToProps: {..} => props = "%identity";

@bs.obj
external makeProps: (
  ~key: string=?,
  ~ref: ReactDOM.domRef=?,
  ~children: React.element,
  ~clone: bool=?,
  ~component: React.component<'componentProps>=?,
  ~style: array<styleProperty>=?,
  ~xs: array<styleProperty>=?,
  ~sm: array<styleProperty>=?,
  ~md: array<styleProperty>=?,
  ~lg: array<styleProperty>=?,
  ~xl: array<styleProperty>=?,
  // HTML aria attributes
  ~\"aria-details": string=?,
  ~\"aria-disabled": bool=?,
  ~\"aria-hidden": bool=?,
  ~\"aria-keyshortcuts": string=?,
  ~\"aria-label": string=?,
  ~\"aria-roledescription": string=?,
  ~\"aria-expanded": bool=?,
  ~\"aria-level": bool=?,
  ~\"aria-modal": bool=?,
  ~\"aria-multiline": bool=?,
  ~\"aria-multiselectable": bool=?,
  ~\"aria-placeholder": string=?,
  ~\"area-readonly": bool=?,
  ~\"aria-required": bool=?,
  ~\"aria-selected": bool=?,
  ~\"aria-sort": string=?,
  ~\"aria-valuemax": float=?,
  ~\"aria-valuemin": float=?,
  ~\"aria-valuetext": float=?,
  ~\"aria-atomic": bool=?,
  ~\"aria-busy": bool=?,
  ~\"aria-relevant": string=?,
  ~\"aria-grabbed": bool=?,
  ~\"aria-activedescendant": string=?,
  ~\"aria-colcount": int=?,
  ~\"aria-colindex": int=?,
  ~\"aria-colspan": int=?,
  ~\"aria-controls": string=?,
  ~\"aria-describedby": string=?,
  ~\"aria-errormessage": string=?,
  ~\"aria-flowto": string=?,
  ~\"aria-labelledby": string=?,
  ~\"aria-owns": string=?,
  ~\"aria-posinset": int=?,
  ~\"aria-rowcount": int=?,
  ~\"aria-rowindex": int=?,
  ~\"aria-rowspan": int=?,
  ~\"aria-setsize": int=?,
  // HTML global attributes
  ~accessKey: string=?,
  ~className: string=?,
  ~contentEditable: bool=?,
  ~contextMenu: string=?,
  ~dir: Materialui_Dom.dir=?,
  ~draggable: bool=?,
  ~hidden: bool=?,
  ~id: string=?,
  ~lang: string=?,
  ~role: string=?,
  ~style: ReactDOM.style=?,
  ~spellCheck: bool=?,
  ~tabIndex: int=?,
  ~title: string=?,
  // HTML5 microdata
  ~itemID: string=?,
  ~itemProps: string=?,
  ~itemRef: string=?,
  ~itemScope: bool=?,
  ~itemType: string=?,
  // HTML event attributes
  ~onCopy: ReactEvent.Clipboard.t => unit=?,
  ~onCut: ReactEvent.Clipboard.t => unit=?,
  ~onPaste: ReactEvent.Clipboard.t => unit=?,
  ~onCompositionEnd: ReactEvent.Composition.t => unit=?,
  ~onCompositionStart: ReactEvent.Composition.t => unit=?,
  ~onCompositionUpdate: ReactEvent.Composition.t => unit=?,
  ~onKeyDown: ReactEvent.Keyboard.t => unit=?,
  ~onKeyPress: ReactEvent.Keyboard.t => unit=?,
  ~onKeyUp: ReactEvent.Keyboard.t => unit=?,
  ~onFocus: ReactEvent.Focus.t => unit=?,
  ~onBlur: ReactEvent.Focus.t => unit=?,
  ~onChange: ReactEvent.Form.t => unit=?,
  ~onInput: ReactEvent.Form.t => unit=?,
  ~onSubmit: ReactEvent.Form.t => unit=?,
  ~onInvalid: ReactEvent.Form.t => unit=?,
  ~onClick: ReactEvent.Mouse.t => unit=?,
  ~onContextMenu: ReactEvent.Mouse.t => unit=?,
  ~onDoubleClick: ReactEvent.Mouse.t => unit=?,
  ~onDrag: ReactEvent.Mouse.t => unit=?,
  ~onDragEnd: ReactEvent.Mouse.t => unit=?,
  ~onDragEnter: ReactEvent.Mouse.t => unit=?,
  ~onDragExit: ReactEvent.Mouse.t => unit=?,
  ~onDragLeave: ReactEvent.Mouse.t => unit=?,
  ~onDragOver: ReactEvent.Mouse.t => unit=?,
  ~onDragStart: ReactEvent.Mouse.t => unit=?,
  ~onDrop: ReactEvent.Mouse.t => unit=?,
  ~onMouseDown: ReactEvent.Mouse.t => unit=?,
  ~onMouseEnter: ReactEvent.Mouse.t => unit=?,
  ~onMouseLeave: ReactEvent.Mouse.t => unit=?,
  ~onMouseMove: ReactEvent.Mouse.t => unit=?,
  ~onMouseOut: ReactEvent.Mouse.t => unit=?,
  ~onMouseOver: ReactEvent.Mouse.t => unit=?,
  ~onMouseUp: ReactEvent.Mouse.t => unit=?,
  ~onSelect: ReactEvent.Selection.t => unit=?,
  ~onTouchCancel: ReactEvent.Touch.t => unit=?,
  ~onTouchEnd: ReactEvent.Touch.t => unit=?,
  ~onTouchMove: ReactEvent.Touch.t => unit=?,
  ~onTouchStart: ReactEvent.Touch.t => unit=?,
  ~onPointerOver: ReactEvent.Pointer.t => unit=?,
  ~onPointerEnter: ReactEvent.Pointer.t => unit=?,
  ~onPointerDown: ReactEvent.Pointer.t => unit=?,
  ~onPointerMove: ReactEvent.Pointer.t => unit=?,
  ~onPointerUp: ReactEvent.Pointer.t => unit=?,
  ~onPointerCancel: ReactEvent.Pointer.t => unit=?,
  ~onPointerOut: ReactEvent.Pointer.t => unit=?,
  ~onPointerLeave: ReactEvent.Pointer.t => unit=?,
  ~onGotPointerCapture: ReactEvent.Pointer.t => unit=?,
  ~onLostPointerCapture: ReactEvent.Pointer.t => unit=?,
  ~onScroll: ReactEvent.UI.t => unit=?,
  ~onWheel: ReactEvent.Wheel.t => unit=?,
  ~onAbort: ReactEvent.Media.t => unit=?,
  ~onCanPlay: ReactEvent.Media.t => unit=?,
  ~onCanPlayThrough: ReactEvent.Media.t => unit=?,
  ~onDurationChange: ReactEvent.Media.t => unit=?,
  ~onEmptied: ReactEvent.Media.t => unit=?,
  ~onEncrypted: ReactEvent.Media.t => unit=?,
  ~onEnded: ReactEvent.Media.t => unit=?,
  ~onError: ReactEvent.Media.t => unit=?,
  ~onLoadedData: ReactEvent.Media.t => unit=?,
  ~onLoadedMetadata: ReactEvent.Media.t => unit=?,
  ~onLoadStart: ReactEvent.Media.t => unit=?,
  ~onPause: ReactEvent.Media.t => unit=?,
  ~onPlay: ReactEvent.Media.t => unit=?,
  ~onPlaying: ReactEvent.Media.t => unit=?,
  ~onProgress: ReactEvent.Media.t => unit=?,
  ~onRateChange: ReactEvent.Media.t => unit=?,
  ~onSeeked: ReactEvent.Media.t => unit=?,
  ~onSeeking: ReactEvent.Media.t => unit=?,
  ~onStalled: ReactEvent.Media.t => unit=?,
  ~onSuspend: ReactEvent.Media.t => unit=?,
  ~onTimeUpdate: ReactEvent.Media.t => unit=?,
  ~onVolumeChange: ReactEvent.Media.t => unit=?,
  ~onWaiting: ReactEvent.Media.t => unit=?,
  ~onLoad: ReactEvent.Image.t => unit=?,
  ~onAnimationStart: ReactEvent.Animation.t => unit=?,
  ~onAnimationEnd: ReactEvent.Animation.t => unit=?,
  ~onAnimationIteration: ReactEvent.Animation.t => unit=?,
  ~onTransitionEnd: ReactEvent.Transition.t => unit=?,
  unit
) => props = "";

let make = props => React.createElement(box, makeBoxProps(props));

// Border
let border = (
  ~width=?,
  ~style=?,
  ~color=?,
  unit
) => StyleProperty((#border, Border.make(~width=?width, ~style=?style, ~color=?color, ())));
let borderInt = v => StyleProperty((#border, v));
let borderString = v => StyleProperty((#border, v));
let borderInherit = () => StyleProperty((#border, "inherit"));
let borderInitial = () => StyleProperty((#border, "initial"));
let borderUnset = () => StyleProperty((#border, "unset"));
let borderTop = (
  ~width=?,
  ~style=?,
  ~color=?,
  unit
) => StyleProperty((#border, Border.make(~width=?width, ~style=?style, ~color=?color, ())));
let borderTopInt = v => StyleProperty((#border, v));
let borderTopString = v => StyleProperty((#border, v));
let borderTopInherit = () => StyleProperty((#border, "inherit"));
let borderTopInitial = () => StyleProperty((#border, "initial"));
let borderTopUnset = () => StyleProperty((#border, "unset"));
let borderLeft = (
  ~width=?,
  ~style=?,
  ~color=?,
  unit
) => StyleProperty((#border, Border.make(~width=?width, ~style=?style, ~color=?color, ())));
let borderLeftInt = v => StyleProperty((#border, v));
let borderLeftString = v => StyleProperty((#border, v));
let borderLeftInherit = () => StyleProperty((#border, "inherit"));
let borderLeftInitial = () => StyleProperty((#border, "initial"));
let borderLeftUnset = () => StyleProperty((#border, "unset"));
let borderColor = v => StyleProperty((#borderColor, BorderColor.make(v)));
let borderColor2 = (v1, v2) => StyleProperty((#borderColor, BorderColor.make2(v1, v2)));
let borderColor3 = 
  (v1, v2, v3) => StyleProperty((#borderColor, BorderColor.make3(v1, v2, v3)));
let borderColor4 = 
  (v1, v2, v3, v4) => StyleProperty((#borderColor, BorderColor.make4(v1, v2, v3, v4)));
let borderColorString = v => StyleProperty((#borderColor, v));
let borderColorInherit = () => StyleProperty((#borderColor, "inherit"));
let borderColorInitial = () => StyleProperty((#borderColor, "initial"));
let borderColorUnset = () => StyleProperty((#borderColor, "unset")); 
let borderRadius = (
  ~rx,
  ~ry=?,
  ()
) => StyleProperty((#borderRadius, BorderRadius.make(~rx, ~ry=?ry, ())));
let borderRadiusInt = v => StyleProperty((#borderRadius, v));
let borderRadiusInherit = () => StyleProperty((#borderRadius, "inherit"));
let borderRadiusInitial = () => StyleProperty((#borderRadius, "initial"));
let borderRadiusUnset = () => StyleProperty((#borderRadius, "unset"));

// Display
let display = v => StyleProperty((#display, Display.make(v)));
let display2 = (v1, v2) => StyleProperty((#display, Display.make2(v1, v2)));
let displayString = v => StyleProperty((#display, v));
let displayInherit = () => StyleProperty((#display, "inherit"));
let displayInitial = () => StyleProperty((#display, "initial"));
let displayUnset = () => StyleProperty((#display, "unset")); 
let overflow = v => StyleProperty((#overflow, Overflow.make(v)));
let overflow2 = (v1, v2) => StyleProperty((#overflow, Overflow.make2(v1, v2)));
let overflowString = v => StyleProperty((#overflow, v));
let overflowInherit = () => StyleProperty((#overflow, "inherit"));
let overflowInitial = () => StyleProperty((#overflow, "initial"));
let overflowUnset = () => StyleProperty((#overflow, "unset"));
let textOverflow = v => StyleProperty((#textOverflow, TextOverflow.make(v)));
let textOverflow2 = (v1, v2) => StyleProperty((#textOverflow, TextOverflow.make2(v1, v2)));
let textOverflowString = v => StyleProperty((#textOverflow, v));
let textOverflowInherit = () => StyleProperty((#textOverflow, "inherit"));
let textOverflowInitial = () => StyleProperty((#textOverflow, "initial"));
let textOverflowUnset = () => StyleProperty((#textOverflow, "unset"));
let visibility = v => StyleProperty((#visibility, Visibility.make(v)));
let visibilityString = v => StyleProperty((#visibility, v));
let visibilityInherit = () => StyleProperty((#visibility, "inherit"));
let visibilityInitial = () => StyleProperty((#visibility, "initial"));
let visibilityUnset = () => StyleProperty((#visibility, "unset"));
let whiteSpace = v => StyleProperty((#whiteSpace, WhiteSpace.make(v)));
let whiteSpaceString = v => StyleProperty((#whiteSpace, v));
let whiteSpaceInherit = () => StyleProperty((#whiteSpace, "inherit"));
let whiteSpaceInitial = () => StyleProperty((#whiteSpace, "initial"));
let whiteSpaceUnset = () => StyleProperty((#whiteSpace, "unset"));

// Flexbox
let flexDirection = v => StyleProperty((#flexDirection, FlexDirection.make(v)));
let flexDirectionString = v => StyleProperty((#flexDirection, v));
let flexDirectionInherit = () => StyleProperty((#flexDirection, "inherit"));
let flexDirectionInitial = () => StyleProperty((#flexDirection, "initial"));
let flexDirectionUnset = () => StyleProperty((#flexDirection, "unset"));
let flexWrap = v => StyleProperty((#flexWrap, FlexWrap.make(v)));
let flexWrapString = v => StyleProperty((#flexWrap, v));
let flexWrapInherit = () => StyleProperty((#flexWrap, "inherit"));
let flexWrapInitial = () => StyleProperty((#flexWrap, "initial"));
let flexWrapUnset = () => StyleProperty((#flexWrap, "unset"));
let justifyContent = v => StyleProperty((#justifyContent, JustifyContent.make(v)));
let justifyContent2 = (v1, v2) => StyleProperty((#justifyContent, JustifyContent.make2(v1, v2)));
let justifyContentString = v => StyleProperty((#justifyContent, v));
let justifyContentInitial = () => StyleProperty((#justifyContent, "initial"));
let justifyContentInherit = () => StyleProperty((#justifyContent, "inherit"));
let justifyContentUnset = () => StyleProperty((#justifyContent, "unset"));
let alignItems = v => StyleProperty((#alignItems, AlignItems.make(v)));
let alignItems2 = (v1, v2) => StyleProperty((#alignItems, AlignItems.make2(v1, v2)));
let alignItemsString = v => StyleProperty((#alignItems, v));
let alignItemsInitial = () => StyleProperty((#alignItems, "initial"));
let alignItemsInherit = () => StyleProperty((#alignItems, "inherit"));
let alignItemsUnset = () => StyleProperty((#alignItems, "unset"));
let alignContent = v => StyleProperty((#alignContent, AlignContent.make(v)));
let alignContent2 = (v1, v2) => StyleProperty((#alignContent, AlignContent.make2(v1, v2)));
let alignContentString = v => StyleProperty((#alignContent, v));
let alignContentInherit = () => StyleProperty((#alignContent, "inherit"));
let alignContentInitial = () => StyleProperty((#alignContent, "initial"));
let alignContentUnset = () => StyleProperty((#alignContent, "unset"));
let order = v => StyleProperty((#order, Order.make(v)));
let orderInherit = () => StyleProperty((#order, "inherit"));
let orderInitial = () => StyleProperty((#order, "initial"));
let orderUnset = () => StyleProperty((#order, "unset"));
let flex = (
  ~grow,
  ~shrink=?,
  ~width=?,
  unit
) => StyleProperty((#flex, Flex.make(~grow, ~shrink=?shrink, ~width=?width, ())));
let flexString = v => StyleProperty((#flex, v));
let flexNumber = v => StyleProperty((#flex, v));
let flexNone = () => StyleProperty((#flex, "none"));
let flexAuto = () => StyleProperty((#flex, "auto"));
let flexInitial = () => StyleProperty((#flex, "initial"));
let flexInherit = () => StyleProperty((#flex, "inherit"));
let flexUnset = () => StyleProperty((#flex, "unset"));
let flexGrow = v => StyleProperty((#flexGrow, FlexGrow.make(v)));
let flexGrowInherit = () => StyleProperty((#flexGrow, "inherit"));
let flexGrowInitial = () => StyleProperty((#flexGrow, "initial"));
let flexGrowUnset = () => StyleProperty((#flexGrow, "unset"));
let flexShrink = v => StyleProperty((#flexShrink, FlexShrink.make(v)));
let flexShrinkInherit = () => StyleProperty((#flexShrink, "inherit"));
let flexShrinkInitial = () => StyleProperty((#flexShrink, "initial"));
let flexShrinkUnset = () => StyleProperty((#flexShrink, "unset"));
let alignSelf = v => StyleProperty((#alignSelf, AlignSelf.make(v)));
let alignSelf2 = (v1, v2) => StyleProperty((#alignSelf, AlignSelf.make2(v1, v2)));
let alignSelfString = v => StyleProperty((#alignSelf, v));
let alignSelfInherit = () => StyleProperty((#alignSelf, "inherit"));
let alignSelfInitial = () => StyleProperty((#alignSelf, "initial"));
let alignSelfUnset = () => StyleProperty((#alignSelf, "unset"));

// Pallete
let color = v => StyleProperty((#color, Color.make(v)));
let colorString = v => StyleProperty((#color, v));
let colorInherit = () => StyleProperty((#color, "inherit"));
let colorInitial = () => StyleProperty((#color, "initial"));
let colorUnset = () => StyleProperty((#color, "unset"));
let bgcolor = v => StyleProperty((#bgcolor, BackgroundColor.make(v)));
let bgcolorString = v => StyleProperty((#bgcolor, v));
let bgcolorInherit = () => StyleProperty((#bgcolor, "inherit"));
let bgcolorInitial = () => StyleProperty((#bgcolor, "initial"));
let bgcolorUnset = () => StyleProperty((#bgcolor, "unset"));