open StyleKeyword.Common
open StyleKeyword.Border
open StyleKeyword.Display
open StyleKeyword.Flexbox

type styleProperty

type props

@bs.obj
external makeProps: (
  ~key: string=?,
  ~ref: ReactDOM.domRef=?,
  ~children: React.element,
  ~clone: bool=?,
  ~component: React.component<'componentProps>=?,
  ~style: array<styleProperty>=?,
  ~xs: array<styleProperty>=?,
  ~sm: array<styleProperty>=?,
  ~md: array<styleProperty>=?,
  ~lg: array<styleProperty>=?,
  ~xl: array<styleProperty>=?,
  // HTML aria attributes
  ~\"aria-details": string=?,
  ~\"aria-disabled": bool=?,
  ~\"aria-hidden": bool=?,
  ~\"aria-keyshortcuts": string=?,
  ~\"aria-label": string=?,
  ~\"aria-roledescription": string=?,
  ~\"aria-expanded": bool=?,
  ~\"aria-level": bool=?,
  ~\"aria-modal": bool=?,
  ~\"aria-multiline": bool=?,
  ~\"aria-multiselectable": bool=?,
  ~\"aria-placeholder": string=?,
  ~\"area-readonly": bool=?,
  ~\"aria-required": bool=?,
  ~\"aria-selected": bool=?,
  ~\"aria-sort": string=?,
  ~\"aria-valuemax": float=?,
  ~\"aria-valuemin": float=?,
  ~\"aria-valuetext": float=?,
  ~\"aria-atomic": bool=?,
  ~\"aria-busy": bool=?,
  ~\"aria-relevant": string=?,
  ~\"aria-grabbed": bool=?,
  ~\"aria-activedescendant": string=?,
  ~\"aria-colcount": int=?,
  ~\"aria-colindex": int=?,
  ~\"aria-colspan": int=?,
  ~\"aria-controls": string=?,
  ~\"aria-describedby": string=?,
  ~\"aria-errormessage": string=?,
  ~\"aria-flowto": string=?,
  ~\"aria-labelledby": string=?,
  ~\"aria-owns": string=?,
  ~\"aria-posinset": int=?,
  ~\"aria-rowcount": int=?,
  ~\"aria-rowindex": int=?,
  ~\"aria-rowspan": int=?,
  ~\"aria-setsize": int=?,
  // HTML global attributes
  ~accessKey: string=?,
  ~className: string=?,
  ~contentEditable: bool=?,
  ~contextMenu: string=?,
  ~dir: Materialui_Dom.dir=?,
  ~draggable: bool=?,
  ~hidden: bool=?,
  ~id: string=?,
  ~lang: string=?,
  ~role: string=?,
  ~style: ReactDOM.style=?,
  ~spellCheck: bool=?,
  ~tabIndex: int=?,
  ~title: string=?,
  // HTML5 microdata
  ~itemID: string=?,
  ~itemProps: string=?,
  ~itemRef: string=?,
  ~itemScope: bool=?,
  ~itemType: string=?,
  // HTML event attributes
  ~onCopy: ReactEvent.Clipboard.t => unit=?,
  ~onCut: ReactEvent.Clipboard.t => unit=?,
  ~onPaste: ReactEvent.Clipboard.t => unit=?,
  ~onCompositionEnd: ReactEvent.Composition.t => unit=?,
  ~onCompositionStart: ReactEvent.Composition.t => unit=?,
  ~onCompositionUpdate: ReactEvent.Composition.t => unit=?,
  ~onKeyDown: ReactEvent.Keyboard.t => unit=?,
  ~onKeyPress: ReactEvent.Keyboard.t => unit=?,
  ~onKeyUp: ReactEvent.Keyboard.t => unit=?,
  ~onFocus: ReactEvent.Focus.t => unit=?,
  ~onBlur: ReactEvent.Focus.t => unit=?,
  ~onChange: ReactEvent.Form.t => unit=?,
  ~onInput: ReactEvent.Form.t => unit=?,
  ~onSubmit: ReactEvent.Form.t => unit=?,
  ~onInvalid: ReactEvent.Form.t => unit=?,
  ~onClick: ReactEvent.Mouse.t => unit=?,
  ~onContextMenu: ReactEvent.Mouse.t => unit=?,
  ~onDoubleClick: ReactEvent.Mouse.t => unit=?,
  ~onDrag: ReactEvent.Mouse.t => unit=?,
  ~onDragEnd: ReactEvent.Mouse.t => unit=?,
  ~onDragEnter: ReactEvent.Mouse.t => unit=?,
  ~onDragExit: ReactEvent.Mouse.t => unit=?,
  ~onDragLeave: ReactEvent.Mouse.t => unit=?,
  ~onDragOver: ReactEvent.Mouse.t => unit=?,
  ~onDragStart: ReactEvent.Mouse.t => unit=?,
  ~onDrop: ReactEvent.Mouse.t => unit=?,
  ~onMouseDown: ReactEvent.Mouse.t => unit=?,
  ~onMouseEnter: ReactEvent.Mouse.t => unit=?,
  ~onMouseLeave: ReactEvent.Mouse.t => unit=?,
  ~onMouseMove: ReactEvent.Mouse.t => unit=?,
  ~onMouseOut: ReactEvent.Mouse.t => unit=?,
  ~onMouseOver: ReactEvent.Mouse.t => unit=?,
  ~onMouseUp: ReactEvent.Mouse.t => unit=?,
  ~onSelect: ReactEvent.Selection.t => unit=?,
  ~onTouchCancel: ReactEvent.Touch.t => unit=?,
  ~onTouchEnd: ReactEvent.Touch.t => unit=?,
  ~onTouchMove: ReactEvent.Touch.t => unit=?,
  ~onTouchStart: ReactEvent.Touch.t => unit=?,
  ~onPointerOver: ReactEvent.Pointer.t => unit=?,
  ~onPointerEnter: ReactEvent.Pointer.t => unit=?,
  ~onPointerDown: ReactEvent.Pointer.t => unit=?,
  ~onPointerMove: ReactEvent.Pointer.t => unit=?,
  ~onPointerUp: ReactEvent.Pointer.t => unit=?,
  ~onPointerCancel: ReactEvent.Pointer.t => unit=?,
  ~onPointerOut: ReactEvent.Pointer.t => unit=?,
  ~onPointerLeave: ReactEvent.Pointer.t => unit=?,
  ~onGotPointerCapture: ReactEvent.Pointer.t => unit=?,
  ~onLostPointerCapture: ReactEvent.Pointer.t => unit=?,
  ~onScroll: ReactEvent.UI.t => unit=?,
  ~onWheel: ReactEvent.Wheel.t => unit=?,
  ~onAbort: ReactEvent.Media.t => unit=?,
  ~onCanPlay: ReactEvent.Media.t => unit=?,
  ~onCanPlayThrough: ReactEvent.Media.t => unit=?,
  ~onDurationChange: ReactEvent.Media.t => unit=?,
  ~onEmptied: ReactEvent.Media.t => unit=?,
  ~onEncrypted: ReactEvent.Media.t => unit=?,
  ~onEnded: ReactEvent.Media.t => unit=?,
  ~onError: ReactEvent.Media.t => unit=?,
  ~onLoadedData: ReactEvent.Media.t => unit=?,
  ~onLoadedMetadata: ReactEvent.Media.t => unit=?,
  ~onLoadStart: ReactEvent.Media.t => unit=?,
  ~onPause: ReactEvent.Media.t => unit=?,
  ~onPlay: ReactEvent.Media.t => unit=?,
  ~onPlaying: ReactEvent.Media.t => unit=?,
  ~onProgress: ReactEvent.Media.t => unit=?,
  ~onRateChange: ReactEvent.Media.t => unit=?,
  ~onSeeked: ReactEvent.Media.t => unit=?,
  ~onSeeking: ReactEvent.Media.t => unit=?,
  ~onStalled: ReactEvent.Media.t => unit=?,
  ~onSuspend: ReactEvent.Media.t => unit=?,
  ~onTimeUpdate: ReactEvent.Media.t => unit=?,
  ~onVolumeChange: ReactEvent.Media.t => unit=?,
  ~onWaiting: ReactEvent.Media.t => unit=?,
  ~onLoad: ReactEvent.Image.t => unit=?,
  ~onAnimationStart: ReactEvent.Animation.t => unit=?,
  ~onAnimationEnd: ReactEvent.Animation.t => unit=?,
  ~onAnimationIteration: ReactEvent.Animation.t => unit=?,
  ~onTransitionEnd: ReactEvent.Transition.t => unit=?,
  unit
) => props = ""

let make: React.component<props>;

let border: (
  ~width: lineWidth=?,
  ~style: lineStyle=?,
  ~color: color=?,
  unit
) => styleProperty
let borderInt: int => styleProperty
let borderString: string => styleProperty
let borderInherit: unit => styleProperty
let borderInitial: unit => styleProperty
let borderUnset: unit => styleProperty
let borderColor: color => styleProperty
let borderColor2: (color, color) => styleProperty
let borderColor3: (color, color, color) => styleProperty
let borderColor4: (color, color, color, color) => styleProperty
let borderColorString: string => styleProperty
let borderColorInherit: unit => styleProperty
let borderColorInitial: unit => styleProperty
let borderColorUnset: unit => styleProperty
let borderRadius: (
  ~rx: array<length_percentage>,
  ~ry: array<length_percentage>=?,
  unit
) => styleProperty
let borderRadiusInt: int => styleProperty
let borderRadiusInitial: unit => styleProperty
let borderRadiusInherit: unit => styleProperty
let borderRadiusUnset: unit => styleProperty

// Display
let display: display => styleProperty
let display2: (displayOutside, displayInside) => styleProperty
let displayString: string => styleProperty
let displayInitial: unit => styleProperty
let displayInherit: unit => styleProperty
let displayUnset: unit => styleProperty
let overflow: overflow => styleProperty
let overflow2: (overflow, overflow) => styleProperty
let overflowString: string => styleProperty
let overflowInherit: unit => styleProperty
let overflowUnset: unit => styleProperty
let overflowInitial: unit => styleProperty
let textOverflow: textOverflow => styleProperty
let textOverflow2: (textOverflow, textOverflow) => styleProperty
let textOverflowString: string => styleProperty
let textOverflowInherit: unit => styleProperty
let textOverflowInitial: unit => styleProperty
let textOverflowUnset: unit => styleProperty 
let visibility: visibility => styleProperty
let visibilityString: string => styleProperty
let visibilityInherit: unit => styleProperty
let visibilityInitial: unit => styleProperty
let visibilityUnset: unit => styleProperty
let whiteSpace: whiteSpace => styleProperty
let whiteSpaceString: string => styleProperty
let whiteSpaceInherit: unit => styleProperty
let whiteSpaceInitial: unit => styleProperty
let whiteSpaceUnset: unit => styleProperty 

// Flexbox
let flexDirection: flexDirection => styleProperty
let flexDirectionString: string => styleProperty
let flexDirectionInherit: unit => styleProperty
let flexDirectionInitial: unit => styleProperty
let flexDirectionUnset: unit => styleProperty
let flexWrap: flexWrap => styleProperty
let flexWrapString: string => styleProperty
let flexWrapInherit: unit => styleProperty
let flexWrapInitial: unit => styleProperty
let flexWrapUnset: unit => styleProperty
let justifyContent: justifyContent => styleProperty
let justifyContent2: (overflowPosition, contentPosition_lr) => styleProperty
let justifyContentString: string => styleProperty
let justifyContentInherit: unit => styleProperty
let justifyContentInitial: unit => styleProperty
let justifyContentUnset: unit => styleProperty
let alignItems: alignItems => styleProperty
let alignItems2: (overflowPosition, selfPosition) => styleProperty
let alignItemsString: string => styleProperty
let alignItemsInherit: unit => styleProperty
let alignItemsInitial: unit => styleProperty
let alignItemsUnset: unit => styleProperty
let alignContent: alignContent => styleProperty
let alignContent2: (overflowPosition, contentPosition) => styleProperty
let alignContentString: string => styleProperty
let alignContentInherit: unit => styleProperty
let alignContentInitial: unit => styleProperty
let alignContentUnset: unit => styleProperty
let order: int => styleProperty
let orderInherit: unit => styleProperty
let orderInitial: unit => styleProperty
let orderUnset: unit => styleProperty
let flex: (~grow: float, ~shrink: float=?, ~width: width=?, unit) => styleProperty
let flexString: string => styleProperty
let flexNone: unit => styleProperty
let flexAuto: unit => styleProperty
let flexInitial: unit => styleProperty
let flexInherit: unit => styleProperty
let flexUnset: unit => styleProperty
let flexGrow: float => styleProperty
let flexGrowInherit: unit => styleProperty
let flexGrowInitial: unit => styleProperty
let flexGrowUnset: unit => styleProperty
let flexShrink: float => styleProperty
let flexShrinkInherit: unit => styleProperty
let flexShrinkInitial: unit => styleProperty
let flexShrinkUnset: unit => styleProperty
let alignSelf: alignSelf => styleProperty
let alignSelf2: (overflowPosition, selfPosition) => styleProperty
let alignSelfString: string => styleProperty
let alignSelfInherit: unit => styleProperty
let alignSelfInitial: unit => styleProperty
let alignSelfUnset: unit => styleProperty

// Palette
let color: color => styleProperty
let colorString: string => styleProperty
let colorInherit: unit => styleProperty
let colorInitial: unit => styleProperty
let colorUnset: unit => styleProperty
let bgcolor: color => styleProperty
let bgcolorString: string => styleProperty
let bgcolorInherit: unit => styleProperty
let bgcolorInitial: unit => styleProperty
let bgcolorUnset: unit => styleProperty