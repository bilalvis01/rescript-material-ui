// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml_option = require("rescript/lib/js/caml_option.js");
var Styles = require("@material-ui/core/styles");

function tonalOffset(v) {
  if (typeof v === "number") {
    return {
            TAG: /* Number */0,
            _0: v
          };
  } else {
    return {
            TAG: /* Obj */1,
            _0: v
          };
  }
}

function make(primary, secondary, error, warning, info, success, mode, tonalOffset, contrastThreshold, common, grey, text, divider, action, background, getContrastText, param) {
  var tmp = {};
  if (primary !== undefined) {
    tmp.primary = Caml_option.valFromOption(primary);
  }
  if (secondary !== undefined) {
    tmp.secondary = Caml_option.valFromOption(secondary);
  }
  if (error !== undefined) {
    tmp.error = Caml_option.valFromOption(error);
  }
  if (warning !== undefined) {
    tmp.warning = Caml_option.valFromOption(warning);
  }
  if (info !== undefined) {
    tmp.info = Caml_option.valFromOption(info);
  }
  if (success !== undefined) {
    tmp.success = Caml_option.valFromOption(success);
  }
  if (mode !== undefined) {
    tmp.mode = Caml_option.valFromOption(mode);
  }
  if (tonalOffset !== undefined) {
    tmp.tonalOffset = Caml_option.valFromOption(tonalOffset);
  }
  if (contrastThreshold !== undefined) {
    tmp.contrastThreshold = contrastThreshold;
  }
  if (common !== undefined) {
    tmp.common = Caml_option.valFromOption(common);
  }
  if (grey !== undefined) {
    tmp.grey = Caml_option.valFromOption(grey);
  }
  if (text !== undefined) {
    tmp.text = Caml_option.valFromOption(text);
  }
  if (divider !== undefined) {
    tmp.divider = divider;
  }
  if (action !== undefined) {
    tmp.action = Caml_option.valFromOption(action);
  }
  if (background !== undefined) {
    tmp.background = Caml_option.valFromOption(background);
  }
  if (getContrastText !== undefined) {
    tmp.getContrastText = Caml_option.valFromOption(getContrastText);
  }
  return Styles.pallete(tmp);
}

exports.tonalOffset = tonalOffset;
exports.make = make;
/* @material-ui/core/styles Not a pure module */
