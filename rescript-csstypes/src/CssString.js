// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");

function concat(v, cb) {
  var match = v.VAL;
  return Curry._1(cb, match[0]) + " " + Curry._1(cb, match[1]);
}

function join(v, cb) {
  var match = v.VAL;
  return Curry._1(cb, match[0]) + ", " + Curry._1(cb, match[1]);
}

function stick(v, cb) {
  var match = v.VAL;
  return Curry._1(cb, match[0]) + " / " + Curry._1(cb, match[1]);
}

function concatMany(v, cb) {
  return Belt_Array.reduce(v.VAL, "", (function (acc, item) {
                if (acc.length === 0) {
                  return Curry._1(cb, item);
                } else {
                  return acc + " " + Curry._1(cb, item);
                }
              }));
}

function joinMany(v, cb) {
  return Belt_Array.reduce(v.VAL, "", (function (acc, item) {
                if (acc.length === 0) {
                  return Curry._1(cb, item);
                } else {
                  return acc + ", " + Curry._1(cb, item);
                }
              }));
}

function stickMany(v, cb) {
  return Belt_Array.reduce(v.VAL, "", (function (acc, item) {
                if (acc.length === 0) {
                  return Curry._1(cb, item);
                } else {
                  return acc + " / " + Curry._1(cb, item);
                }
              }));
}

function string(v) {
  return v.VAL;
}

function num(v) {
  return String(v);
}

function number(v) {
  return String(v.VAL);
}

function $$int(v) {
  return String(v);
}

function integer(v) {
  return String(v.VAL);
}

function pct(v) {
  return String(v) + "%";
}

function percentage(v) {
  return String(v.VAL) + "%";
}

function r(v1, v2) {
  return String(v1) + "/" + String(v2);
}

function ratio(v) {
  var match = v.VAL;
  return r(match[0], match[1]);
}

function fr(v) {
  return String(v);
}

function flexUnit(v) {
  return String(v.VAL);
}

function scalar(v) {
  var variant = v.NAME;
  if (variant === "integer" || variant === "number") {
    return String(v.VAL);
  } else {
    return v.VAL;
  }
}

function ch(l) {
  return String(l) + "ch";
}

function em(l) {
  return String(l) + "em";
}

function ex(l) {
  return String(l) + "ex";
}

function rem(l) {
  return String(l) + "rem";
}

function vh(l) {
  return String(l) + "vh";
}

function vw(l) {
  return String(l) + "vw";
}

function vmin(l) {
  return String(l) + "vmin";
}

function vmax(l) {
  return String(l) + "vmax";
}

function px(l) {
  return String(l) + "px";
}

function cm(l) {
  return String(l) + "cm";
}

function mm(l) {
  return String(l) + "mm";
}

function inch(l) {
  return String(l) + "in";
}

function pc(l) {
  return String(l) + "pc";
}

function pt(l) {
  return String(l) + "pt";
}

function length(v) {
  var variant = v.NAME;
  if (variant === "vmax") {
    return String(v.VAL) + "vmax";
  } else if (variant === "vmin") {
    return String(v.VAL) + "vmin";
  } else if (variant === "ch") {
    return String(v.VAL) + "ch";
  } else if (variant === "cm") {
    return String(v.VAL) + "cm";
  } else if (variant === "em") {
    return String(v.VAL) + "em";
  } else if (variant === "ex") {
    return String(v.VAL) + "ex";
  } else if (variant === "mm") {
    return String(v.VAL) + "mm";
  } else if (variant === "pc") {
    return String(v.VAL) + "pc";
  } else if (variant === "pt") {
    return String(v.VAL) + "pt";
  } else if (variant === "px") {
    return String(v.VAL) + "px";
  } else if (variant === "vh") {
    return String(v.VAL) + "vh";
  } else if (variant === "vw") {
    return String(v.VAL) + "vw";
  } else if (variant === "rem") {
    return String(v.VAL) + "rem";
  } else {
    return String(v.VAL) + "in";
  }
}

function deg(v) {
  return String(v) + "deg";
}

function grad(v) {
  return String(v) + "grad";
}

function rad(v) {
  return String(v) + "rad";
}

function turn(v) {
  return String(v) + "turn";
}

function angle(v) {
  var variant = v.NAME;
  if (variant === "turn") {
    return String(v.VAL) + "turn";
  } else if (variant === "deg") {
    return String(v.VAL) + "deg";
  } else if (variant === "rad") {
    return String(v.VAL) + "rad";
  } else {
    return String(v.VAL) + "grad";
  }
}

function s(v) {
  return String(v) + "s";
}

function ms(v) {
  return String(v) + "ms";
}

function time(v) {
  if (v.NAME === "ms") {
    return String(v.VAL) + "ms";
  } else {
    return String(v.VAL) + "s";
  }
}

function hz(v) {
  return String(v) + "Hz";
}

function kHz(v) {
  return String(v) + "kHz";
}

function frequency(v) {
  if (v.NAME === "kHz") {
    return String(v.VAL) + "kHz";
  } else {
    return String(v.VAL) + "Hz";
  }
}

function lengthPercentage(v) {
  if (v.NAME === "pct") {
    return percentage(v);
  } else {
    return length(v);
  }
}

function frequencyPercentage(v) {
  if (v.NAME === "pct") {
    return percentage(v);
  } else {
    return frequency(v);
  }
}

function anglePercentage(v) {
  if (v.NAME === "pct") {
    return percentage(v);
  } else {
    return angle(v);
  }
}

function timePercentage(v) {
  if (v.NAME === "pct") {
    return percentage(v);
  } else {
    return time(v);
  }
}

function hue(v) {
  if (v.NAME === "number") {
    return String(v.VAL);
  } else {
    return angle(v);
  }
}

function alpha(v) {
  if (v.NAME === "number") {
    return String(v.VAL);
  } else {
    return percentage(v);
  }
}

function rgbParam(v) {
  if (v.NAME === "number") {
    return String(v.VAL);
  } else {
    return percentage(v);
  }
}

function hsl(v1, v2, v3) {
  return "hsl(" + hue(v1) + ", " + percentage(v2) + ", " + percentage(v3) + ")";
}

function hsla(v1, v2, v3, v4) {
  return "hsla(" + hue(v1) + ", " + percentage(v2) + ", " + percentage(v3) + ", " + alpha(v4) + ")";
}

function rgb(v1, v2, v3) {
  return "rgb(" + rgbParam(v1) + ", " + rgbParam(v2) + ", " + rgbParam(v3) + ")";
}

function rgba(v1, v2, v3, v4) {
  return "rgba(" + rgbParam(v1) + ", " + rgbParam(v2) + ", " + rgbParam(v3) + ", " + alpha(v4) + ")";
}

function rgbHex(v) {
  return "#" + v;
}

function color(v) {
  if (typeof v !== "object") {
    return v;
  }
  var variant = v.NAME;
  if (variant === "rgba") {
    var match = v.VAL;
    return rgba(match[0], match[1], match[2], match[3]);
  }
  if (variant === "hsl") {
    var match$1 = v.VAL;
    return hsl(match$1[0], match$1[1], match$1[2]);
  }
  if (variant === "rgb") {
    var match$2 = v.VAL;
    return rgb(match$2[0], match$2[1], match$2[2]);
  }
  if (variant === "rgbHex") {
    return "#" + v.VAL;
  }
  var match$3 = v.VAL;
  return hsla(match$3[0], match$3[1], match$3[2], match$3[3]);
}

function lineWidth(v) {
  if (typeof v === "object") {
    return length(v);
  } else if (v === "medium") {
    return "medium";
  } else if (v === "thick") {
    return "thick";
  } else {
    return "thin";
  }
}

function borderColor(v) {
  if (typeof v === "object" || !(v === "inherit" || v === "unset" || v === "revert" || v === "initial")) {
    return color(v);
  } else {
    return v;
  }
}

exports.concat = concat;
exports.join = join;
exports.stick = stick;
exports.concatMany = concatMany;
exports.joinMany = joinMany;
exports.stickMany = stickMany;
exports.string = string;
exports.scalar = scalar;
exports.num = num;
exports.number = number;
exports.$$int = $$int;
exports.integer = integer;
exports.pct = pct;
exports.percentage = percentage;
exports.r = r;
exports.ratio = ratio;
exports.fr = fr;
exports.flexUnit = flexUnit;
exports.ch = ch;
exports.em = em;
exports.ex = ex;
exports.rem = rem;
exports.vh = vh;
exports.vw = vw;
exports.vmin = vmin;
exports.vmax = vmax;
exports.px = px;
exports.cm = cm;
exports.mm = mm;
exports.inch = inch;
exports.pc = pc;
exports.pt = pt;
exports.length = length;
exports.s = s;
exports.ms = ms;
exports.time = time;
exports.deg = deg;
exports.grad = grad;
exports.rad = rad;
exports.turn = turn;
exports.angle = angle;
exports.hz = hz;
exports.kHz = kHz;
exports.frequency = frequency;
exports.lengthPercentage = lengthPercentage;
exports.frequencyPercentage = frequencyPercentage;
exports.anglePercentage = anglePercentage;
exports.timePercentage = timePercentage;
exports.hue = hue;
exports.alpha = alpha;
exports.rgbParam = rgbParam;
exports.hsl = hsl;
exports.hsla = hsla;
exports.rgb = rgb;
exports.rgba = rgba;
exports.rgbHex = rgbHex;
exports.color = color;
exports.lineWidth = lineWidth;
exports.borderColor = borderColor;
/* No side effect */
