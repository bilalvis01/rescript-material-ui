// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var CssString$Css = require("./CssString.js");

function border(width, color, style) {
  var border$1 = width !== undefined ? (
      color !== undefined ? CssString$Css.lineWidth(width) + " " + CssString$Css.color(color) : CssString$Css.lineWidth(width)
    ) : (
      color !== undefined ? CssString$Css.color(color) : undefined
    );
  if (style === "inherit" || style === "unset" || style === "revert" || style === "initial" || border$1 === undefined) {
    return style;
  } else {
    return border$1 + " " + style;
  }
}

function borderColor(v) {
  if (typeof v === "object" || !(v === "inherit" || v === "unset" || v === "revert" || v === "initial")) {
    return CssString$Css.color(v);
  } else {
    return v;
  }
}

function borderColor2(tb, lr) {
  return CssString$Css.color(tb) + " " + CssString$Css.color(lr);
}

function borderColor3(top, lr, bottom) {
  return CssString$Css.color(top) + " " + CssString$Css.color(lr) + " " + CssString$Css.color(bottom);
}

function borderColor4(top, right, bottom, left) {
  return CssString$Css.color(top) + " " + CssString$Css.color(right) + " " + CssString$Css.color(bottom) + " " + CssString$Css.color(left);
}

function borderStyle(v) {
  return v;
}

function borderStyle2(tb, lr) {
  return tb + " " + lr;
}

function borderStyle3(top, lr, bottom) {
  return top + " " + lr + " " + bottom;
}

function borderStyle4(top, right, bottom, left) {
  return top + " " + right + " " + bottom + " " + left;
}

function borderWidth(v) {
  if (typeof v === "object" || v === "thick" || v === "medium" || v === "thin") {
    return CssString$Css.lineWidth(v);
  } else {
    return v;
  }
}

function borderWidth2(tb, lr) {
  return CssString$Css.lineWidth(tb) + " " + CssString$Css.lineWidth(lr);
}

function borderWidth3(top, lr, bottom) {
  return CssString$Css.lineWidth(top) + " " + CssString$Css.lineWidth(lr) + " " + CssString$Css.lineWidth(bottom);
}

function borderWidth4(top, right, bottom, left) {
  return CssString$Css.lineWidth(top) + " " + CssString$Css.lineWidth(right) + " " + CssString$Css.lineWidth(bottom) + " " + CssString$Css.lineWidth(left);
}

function background(color, image, position, size, repeat, attachment, origin, clip, imageOrColor) {
  var imageOrColor$1;
  if (typeof imageOrColor === "object") {
    imageOrColor$1 = imageOrColor;
  } else {
    if (imageOrColor === "inherit" || imageOrColor === "unset" || imageOrColor === "revert" || imageOrColor === "initial") {
      return imageOrColor;
    }
    imageOrColor$1 = imageOrColor;
  }
  return CssString$Css.background(color, image, position, size, repeat, attachment, origin, clip, imageOrColor$1);
}

function background2(l1, l2) {
  return CssString$Css.bgLayer(l1) + ", " + CssString$Css.bgLayer(l2);
}

function background3(l1, l2, l3) {
  return CssString$Css.bgLayer(l1) + ", " + CssString$Css.bgLayer(l2) + ", " + CssString$Css.bgLayer(l3);
}

function background4(l1, l2, l3, l4) {
  return CssString$Css.bgLayer(l1) + ", " + CssString$Css.bgLayer(l2) + ", " + CssString$Css.bgLayer(l3) + ", " + CssString$Css.bgLayer(l4);
}

exports.border = border;
exports.borderColor = borderColor;
exports.borderColor2 = borderColor2;
exports.borderColor3 = borderColor3;
exports.borderColor4 = borderColor4;
exports.borderStyle = borderStyle;
exports.borderStyle2 = borderStyle2;
exports.borderStyle3 = borderStyle3;
exports.borderStyle4 = borderStyle4;
exports.borderWidth = borderWidth;
exports.borderWidth2 = borderWidth2;
exports.borderWidth3 = borderWidth3;
exports.borderWidth4 = borderWidth4;
exports.background = background;
exports.background2 = background2;
exports.background3 = background3;
exports.background4 = background4;
/* No side effect */
