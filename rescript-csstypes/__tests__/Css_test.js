// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Css$Ress = require("../src/Css.js");

describe("property", (function () {
        test("property", (function () {
                expect(Css$Ress.property("border", "solid")).toEqual([
                      "border",
                      "solid"
                    ]);
                expect(Css$Ress.propertyString("borderStyle", "dotted")).toEqual([
                      "borderStyle",
                      "dotted"
                    ]);
                expect(Css$Ress.propertyNumber("padding", 1)).toEqual([
                      "padding",
                      1.0
                    ]);
                expect(Css$Ress.propertyInteger("padding", 1)).toEqual([
                      "padding",
                      1
                    ]);
                
              }));
        
      }));

describe("border", (function () {
        test("border", (function () {
                expect(Css$Ress.border(undefined, undefined, "dotted")).toEqual(Css$Ress.propertyString("border", "dotted"));
                expect(Css$Ress.border(Css$Ress.px(1), undefined, "solid")).toEqual(Css$Ress.propertyString("border", "1px solid"));
                expect(Css$Ress.border(Css$Ress.px(1), Css$Ress.rgb(255, 255, 255), "dotted")).toEqual(Css$Ress.propertyString("border", "1px rgb(255, 255, 255) dotted"));
                
              }));
        test("borderTop", (function () {
                expect(Css$Ress.borderTop(undefined, undefined, "dotted")).toEqual(Css$Ress.propertyString("borderTop", "dotted"));
                expect(Css$Ress.borderTop(Css$Ress.px(1), undefined, "solid")).toEqual(Css$Ress.propertyString("borderTop", "1px solid"));
                expect(Css$Ress.borderTop(Css$Ress.px(1), Css$Ress.rgb(255, 255, 255), "dotted")).toEqual(Css$Ress.propertyString("borderTop", "1px rgb(255, 255, 255) dotted"));
                
              }));
        test("borderRight", (function () {
                expect(Css$Ress.borderRight(undefined, undefined, "dotted")).toEqual(Css$Ress.propertyString("borderRight", "dotted"));
                expect(Css$Ress.borderRight(Css$Ress.px(1), undefined, "solid")).toEqual(Css$Ress.propertyString("borderRight", "1px solid"));
                expect(Css$Ress.borderRight(Css$Ress.px(1), Css$Ress.rgb(255, 255, 255), "dotted")).toEqual(Css$Ress.propertyString("borderRight", "1px rgb(255, 255, 255) dotted"));
                
              }));
        test("borderBottom", (function () {
                expect(Css$Ress.borderBottom(undefined, undefined, "dotted")).toEqual(Css$Ress.propertyString("borderBottom", "dotted"));
                expect(Css$Ress.borderBottom(Css$Ress.px(1), undefined, "solid")).toEqual(Css$Ress.propertyString("borderBottom", "1px solid"));
                expect(Css$Ress.borderBottom(Css$Ress.px(1), Css$Ress.rgb(255, 255, 255), "dotted")).toEqual(Css$Ress.propertyString("borderBottom", "1px rgb(255, 255, 255) dotted"));
                
              }));
        test("borderLeft", (function () {
                expect(Css$Ress.borderLeft(undefined, undefined, "dotted")).toEqual(Css$Ress.propertyString("borderLeft", "dotted"));
                expect(Css$Ress.borderLeft(Css$Ress.px(1), undefined, "solid")).toEqual(Css$Ress.propertyString("borderLeft", "1px solid"));
                expect(Css$Ress.borderLeft(Css$Ress.px(1), Css$Ress.rgb(255, 255, 255), "dotted")).toEqual(Css$Ress.propertyString("borderLeft", "1px rgb(255, 255, 255) dotted"));
                
              }));
        test("borderWidth", (function () {
                expect(Css$Ress.borderWidth(Css$Ress.px(1))).toEqual(Css$Ress.propertyString("borderWidth", "1px"));
                expect(Css$Ress.borderWidth2(Css$Ress.px(1), "thin")).toEqual(Css$Ress.propertyString("borderWidth", "1px thin"));
                expect(Css$Ress.borderWidth3("thin", "medium", "thick")).toEqual(Css$Ress.propertyString("borderWidth", "thin medium thick"));
                expect(Css$Ress.borderWidth4(Css$Ress.px(1), "thin", Css$Ress.px(1), "thick")).toEqual(Css$Ress.propertyString("borderWidth", "1px thin 1px thick"));
                expect(Css$Ress.borderTopWidth(Css$Ress.px(1))).toEqual(Css$Ress.propertyString("borderTopWidth", "1px"));
                expect(Css$Ress.borderRightWidth(Css$Ress.px(1))).toEqual(Css$Ress.propertyString("borderRightWidth", "1px"));
                expect(Css$Ress.borderBottomWidth(Css$Ress.px(1))).toEqual(Css$Ress.propertyString("borderBottomWidth", "1px"));
                expect(Css$Ress.borderLeftWidth(Css$Ress.px(1))).toEqual(Css$Ress.propertyString("borderLeftWidth", "1px"));
                
              }));
        test("borderStyle", (function () {
                expect(Css$Ress.borderStyle("unset")).toEqual(Css$Ress.propertyString("borderStyle", "unset"));
                expect(Css$Ress.borderStyle2("solid", "dotted")).toEqual(Css$Ress.propertyString("borderStyle", "solid dotted"));
                expect(Css$Ress.borderStyle3("solid", "inset", "dotted")).toEqual(Css$Ress.propertyString("borderStyle", "solid inset dotted"));
                expect(Css$Ress.borderStyle4("solid", "double", "dotted", "inset")).toEqual(Css$Ress.propertyString("borderStyle", "solid double dotted inset"));
                expect(Css$Ress.borderTopStyle("unset")).toEqual(Css$Ress.propertyString("borderTopStyle", "unset"));
                expect(Css$Ress.borderRightStyle("unset")).toEqual(Css$Ress.propertyString("borderRightStyle", "unset"));
                expect(Css$Ress.borderBottomStyle("unset")).toEqual(Css$Ress.propertyString("borderBottomStyle", "unset"));
                expect(Css$Ress.borderLeftStyle("unset")).toEqual(Css$Ress.propertyString("borderLeftStyle", "unset"));
                
              }));
        test("borderColor", (function () {
                expect(Css$Ress.borderColor(Css$Ress.hsl(Css$Ress.deg(360), Css$Ress.pct(50), Css$Ress.pct(50)))).toEqual(Css$Ress.propertyString("borderColor", "hsl(360deg, 50%, 50%)"));
                expect(Css$Ress.borderColor2("red", "blue")).toEqual(Css$Ress.propertyString("borderColor", "red blue"));
                expect(Css$Ress.borderColor3(Css$Ress.rgbX("000000"), Css$Ress.rgbX("000000"), Css$Ress.rgbX("111111"))).toEqual(Css$Ress.propertyString("borderColor", "#000000 #000000 #111111"));
                expect(Css$Ress.borderColor4("red", "turquoise", "purple", "deeppink")).toEqual(Css$Ress.propertyString("borderColor", "red turquoise purple deeppink"));
                expect(Css$Ress.borderTopColor(Css$Ress.hsl(Css$Ress.deg(360), Css$Ress.pct(50), Css$Ress.pct(50)))).toEqual(Css$Ress.propertyString("borderTopColor", "hsl(360deg, 50%, 50%)"));
                expect(Css$Ress.borderRightColor(Css$Ress.hsl(Css$Ress.deg(360), Css$Ress.pct(50), Css$Ress.pct(50)))).toEqual(Css$Ress.propertyString("borderRightColor", "hsl(360deg, 50%, 50%)"));
                expect(Css$Ress.borderBottomColor(Css$Ress.hsl(Css$Ress.deg(360), Css$Ress.pct(50), Css$Ress.pct(50)))).toEqual(Css$Ress.propertyString("borderBottomColor", "hsl(360deg, 50%, 50%)"));
                expect(Css$Ress.borderLeftColor(Css$Ress.hsl(Css$Ress.deg(360), Css$Ress.pct(50), Css$Ress.pct(50)))).toEqual(Css$Ress.propertyString("borderLeftColor", "hsl(360deg, 50%, 50%)"));
                
              }));
        
      }));

describe("background", (function () {
        test("background", (function () {
                expect(Css$Ress.background(undefined, undefined, undefined, undefined, undefined, undefined, undefined, "initial")).toEqual(Css$Ress.propertyString("background", "initial"));
                expect(Css$Ress.background("red", undefined, undefined, undefined, undefined, undefined, undefined, "initial")).toEqual(Css$Ress.propertyString("background", "initial"));
                expect(Css$Ress.background(undefined, undefined, undefined, undefined, undefined, undefined, undefined, "red")).toEqual(Css$Ress.propertyString("background", "red"));
                expect(Css$Ress.background(undefined, undefined, undefined, undefined, undefined, undefined, undefined, Css$Ress.rgb(255, 255, 255))).toEqual(Css$Ress.propertyString("background", "rgb(255, 255, 255)"));
                expect(Css$Ress.background(undefined, undefined, undefined, "repeat-y", undefined, undefined, undefined, Css$Ress.url("test.jpg"))).toEqual(Css$Ress.propertyString("background", "url(\"test.jpg\") repeat-y"));
                expect(Css$Ress.background2(Css$Ress.linearGradient2(Css$Ress.deg(217), Css$Ress.rgba(255, 0, 0, 0.8), Css$Ress.linearColorStop2(Css$Ress.rgba(255, 0, 0, 0), Css$Ress.pct(70.71))), Css$Ress.linearGradient2(Css$Ress.deg(127), Css$Ress.rgba(0, 255, 0, 0.8), Css$Ress.linearColorStop2(Css$Ress.rgba(0, 255, 0, 0), Css$Ress.pct(70.71))))).toEqual(Css$Ress.propertyString("background", "linear-gradient(217deg, rgba(255, 0, 0, 0.8), rgba(255, 0, 0, 0) 70.71%), linear-gradient(127deg, rgba(0, 255, 0, 0.8), rgba(0, 255, 0, 0) 70.71%)"));
                expect(Css$Ress.background3(Css$Ress.linearGradient2(Css$Ress.deg(217), Css$Ress.rgba(255, 0, 0, 0.8), Css$Ress.linearColorStop2(Css$Ress.rgba(255, 0, 0, 0), Css$Ress.pct(70.71))), Css$Ress.linearGradient2(Css$Ress.deg(127), Css$Ress.rgba(0, 255, 0, 0.8), Css$Ress.linearColorStop2(Css$Ress.rgba(0, 255, 0, 0), Css$Ress.pct(70.71))), Css$Ress.linearGradient2(Css$Ress.deg(217), Css$Ress.rgba(255, 0, 0, 0.8), Css$Ress.linearColorStop2(Css$Ress.rgba(255, 0, 0, 0), Css$Ress.pct(70.71))))).toEqual(Css$Ress.propertyString("background", "linear-gradient(217deg, rgba(255, 0, 0, 0.8), rgba(255, 0, 0, 0) 70.71%), linear-gradient(127deg, rgba(0, 255, 0, 0.8), rgba(0, 255, 0, 0) 70.71%), linear-gradient(217deg, rgba(255, 0, 0, 0.8), rgba(255, 0, 0, 0) 70.71%)"));
                expect(Css$Ress.background4(Css$Ress.linearGradient2(Css$Ress.deg(217), Css$Ress.rgba(255, 0, 0, 0.8), Css$Ress.linearColorStop2(Css$Ress.rgba(255, 0, 0, 0), Css$Ress.pct(70.71))), Css$Ress.linearGradient2(Css$Ress.deg(127), Css$Ress.rgba(0, 255, 0, 0.8), Css$Ress.linearColorStop2(Css$Ress.rgba(0, 255, 0, 0), Css$Ress.pct(70.71))), Css$Ress.linearGradient2(Css$Ress.deg(217), Css$Ress.rgba(255, 0, 0, 0.8), Css$Ress.linearColorStop2(Css$Ress.rgba(255, 0, 0, 0), Css$Ress.pct(70.71))), Css$Ress.linearGradient2(Css$Ress.deg(127), Css$Ress.rgba(0, 255, 0, 0.8), Css$Ress.linearColorStop2(Css$Ress.rgba(0, 255, 0, 0), Css$Ress.pct(70.71))))).toEqual(Css$Ress.propertyString("background", "linear-gradient(217deg, rgba(255, 0, 0, 0.8), rgba(255, 0, 0, 0) 70.71%), linear-gradient(127deg, rgba(0, 255, 0, 0.8), rgba(0, 255, 0, 0) 70.71%), linear-gradient(217deg, rgba(255, 0, 0, 0.8), rgba(255, 0, 0, 0) 70.71%), linear-gradient(127deg, rgba(0, 255, 0, 0.8), rgba(0, 255, 0, 0) 70.71%)"));
                expect(Css$Ress.background4(Css$Ress.bgLayer(undefined, undefined, undefined, "repeat", undefined, undefined, undefined, Css$Ress.url("myimage.png")), Css$Ress.bgLayer(undefined, undefined, undefined, "repeat", undefined, undefined, undefined, Css$Ress.url("myimage.png")), Css$Ress.bgLayer(undefined, undefined, undefined, "repeat", undefined, undefined, undefined, Css$Ress.url("myimage.png")), Css$Ress.bgLayer(undefined, undefined, undefined, "repeat", undefined, undefined, undefined, Css$Ress.url("myimage.png")))).toEqual(Css$Ress.propertyString("background", "url(\"myimage.png\") repeat, url(\"myimage.png\") repeat, url(\"myimage.png\") repeat, url(\"myimage.png\") repeat"));
                
              }));
        test("backgroundAttachment", (function () {
                expect(Css$Ress.backgroundAttachment("scroll")).toEqual(Css$Ress.propertyString("backgroundAttachment", "scroll"));
                expect(Css$Ress.backgroundAttachment2("scroll", "fixed")).toEqual(Css$Ress.propertyString("backgroundAttachment", "scroll, fixed"));
                expect(Css$Ress.backgroundAttachment3("scroll", "fixed", "fixed")).toEqual(Css$Ress.propertyString("backgroundAttachment", "scroll, fixed, fixed"));
                expect(Css$Ress.backgroundAttachment4("scroll", "fixed", "fixed", "local")).toEqual(Css$Ress.propertyString("backgroundAttachment", "scroll, fixed, fixed, local"));
                
              }));
        test("backgroundColor", (function () {
                expect(Css$Ress.backgroundColor(Css$Ress.rgb(200, 200, 200))).toEqual(Css$Ress.propertyString("backgroundColor", "rgb(200, 200, 200)"));
                
              }));
        test("backgroundImage", (function () {
                expect(Css$Ress.backgroundImage(Css$Ress.url("image.png"))).toEqual(Css$Ress.propertyString("backgroundImage", "url(\"image.png\")"));
                expect(Css$Ress.backgroundImage2(Css$Ress.url("image.png"), Css$Ress.image(undefined, undefined, Css$Ress.url("myimage.jpg")))).toEqual(Css$Ress.propertyString("backgroundImage", "url(\"image.png\"), image(url(\"myimage.jpg\"))"));
                expect(Css$Ress.backgroundImage3(Css$Ress.url("image.png"), Css$Ress.image(undefined, undefined, Css$Ress.url("myimage.jpg")), Css$Ress.linearGradient(undefined, "red"))).toEqual(Css$Ress.propertyString("backgroundImage", "url(\"image.png\"), image(url(\"myimage.jpg\")), linear-gradient(red)"));
                expect(Css$Ress.backgroundImage4(Css$Ress.url("image.png"), Css$Ress.image(undefined, undefined, Css$Ress.url("myimage.jpg")), Css$Ress.linearGradient(undefined, "red"), Css$Ress.radialGradient(undefined, undefined, undefined, "blue"))).toEqual(Css$Ress.propertyString("backgroundImage", "url(\"image.png\"), image(url(\"myimage.jpg\")), linear-gradient(red), radial-gradient(blue)"));
                
              }));
        test("backgroundPosition", (function () {
                expect(Css$Ress.backgroundPosition(Css$Ress.px(10))).toEqual(Css$Ress.propertyString("backgroundPosition", "10px"));
                expect(Css$Ress.backgroundPosition2(Css$Ress.px(10), Css$Ress.position2("center", "bottom"))).toEqual(Css$Ress.propertyString("backgroundPosition", "10px, center bottom"));
                expect(Css$Ress.backgroundPosition3(Css$Ress.px(10), Css$Ress.position2("center", "bottom"), "center")).toEqual(Css$Ress.propertyString("backgroundPosition", "10px, center bottom, center"));
                expect(Css$Ress.backgroundPosition4(Css$Ress.px(10), Css$Ress.position2("center", "bottom"), Css$Ress.pct(10), Css$Ress.position4("left", Css$Ress.px(10), "top", Css$Ress.pct(10)))).toEqual(Css$Ress.propertyString("backgroundPosition", "10px, center bottom, 10%, left 10px top 10%"));
                
              }));
        test("backgroundStyle", (function () {
                expect(Css$Ress.backgroundStyle("repeat-x")).toEqual(Css$Ress.propertyString("backgroundStyle", "repeat-x"));
                expect(Css$Ress.backgroundStyle2("repeat-x", "repeat repeat")).toEqual(Css$Ress.propertyString("backgroundStyle", "repeat-x, repeat repeat"));
                expect(Css$Ress.backgroundStyle3("repeat-x", "repeat repeat", "no-repeat")).toEqual(Css$Ress.propertyString("backgroundStyle", "repeat-x, repeat repeat, no-repeat"));
                expect(Css$Ress.backgroundStyle4("repeat-x", "repeat repeat", "no-repeat", "space")).toEqual(Css$Ress.propertyString("backgroundStyle", "repeat-x, repeat repeat, no-repeat, space"));
                
              }));
        
      }));

describe("spacing", (function () {
        test("margin", (function () {
                expect(Css$Ress.margin(Css$Ress.px(24))).toEqual(Css$Ress.propertyString("margin", "24px"));
                expect(Css$Ress.margin("initial")).toEqual(Css$Ress.propertyString("margin", "initial"));
                expect(Css$Ress.margin2(Css$Ress.rem(2), Css$Ress.rem(4))).toEqual(Css$Ress.propertyString("margin", "2rem 4rem"));
                expect(Css$Ress.margin3(Css$Ress.px(10), Css$Ress.px(24), Css$Ress.px(40))).toEqual(Css$Ress.propertyString("margin", "10px 24px 40px"));
                expect(Css$Ress.margin4(Css$Ress.px(20), Css$Ress.px(40), Css$Ress.px(20), Css$Ress.px(40))).toEqual(Css$Ress.propertyString("margin", "20px 40px 20px 40px"));
                expect(Css$Ress.marginTop(Css$Ress.px(24))).toEqual(Css$Ress.propertyString("marginTop", "24px"));
                expect(Css$Ress.marginTop("initial")).toEqual(Css$Ress.propertyString("marginTop", "initial"));
                expect(Css$Ress.marginRight(Css$Ress.px(24))).toEqual(Css$Ress.propertyString("marginRight", "24px"));
                expect(Css$Ress.marginRight("initial")).toEqual(Css$Ress.propertyString("marginRight", "initial"));
                expect(Css$Ress.marginBottom(Css$Ress.px(24))).toEqual(Css$Ress.propertyString("marginBottom", "24px"));
                expect(Css$Ress.marginBottom("initial")).toEqual(Css$Ress.propertyString("marginBottom", "initial"));
                expect(Css$Ress.marginLeft(Css$Ress.px(24))).toEqual(Css$Ress.propertyString("marginLeft", "24px"));
                expect(Css$Ress.marginLeft("initial")).toEqual(Css$Ress.propertyString("marginLeft", "initial"));
                
              }));
        test("padding", (function () {
                expect(Css$Ress.padding(Css$Ress.px(24))).toEqual(Css$Ress.propertyString("padding", "24px"));
                expect(Css$Ress.padding("initial")).toEqual(Css$Ress.propertyString("padding", "initial"));
                expect(Css$Ress.padding2(Css$Ress.rem(2), Css$Ress.rem(4))).toEqual(Css$Ress.propertyString("padding", "2rem 4rem"));
                expect(Css$Ress.padding3(Css$Ress.px(10), Css$Ress.px(24), Css$Ress.px(40))).toEqual(Css$Ress.propertyString("padding", "10px 24px 40px"));
                expect(Css$Ress.padding4(Css$Ress.px(20), Css$Ress.px(40), Css$Ress.px(20), Css$Ress.px(40))).toEqual(Css$Ress.propertyString("padding", "20px 40px 20px 40px"));
                expect(Css$Ress.paddingTop(Css$Ress.px(24))).toEqual(Css$Ress.propertyString("paddingTop", "24px"));
                expect(Css$Ress.paddingTop("initial")).toEqual(Css$Ress.propertyString("paddingTop", "initial"));
                expect(Css$Ress.paddingRight(Css$Ress.px(24))).toEqual(Css$Ress.propertyString("paddingRight", "24px"));
                expect(Css$Ress.paddingRight("initial")).toEqual(Css$Ress.propertyString("paddingRight", "initial"));
                expect(Css$Ress.paddingBottom(Css$Ress.px(24))).toEqual(Css$Ress.propertyString("paddingBottom", "24px"));
                expect(Css$Ress.paddingBottom("initial")).toEqual(Css$Ress.propertyString("paddingBottom", "initial"));
                expect(Css$Ress.paddingLeft(Css$Ress.px(24))).toEqual(Css$Ress.propertyString("paddingLeft", "24px"));
                expect(Css$Ress.paddingLeft("initial")).toEqual(Css$Ress.propertyString("paddingLeft", "initial"));
                
              }));
        
      }));

describe("others", (function () {
        test("clear", (function () {
                expect(Css$Ress.clear("none")).toEqual(Css$Ress.propertyString("clear", "none"));
                expect(Css$Ress.clear("left")).toEqual(Css$Ress.propertyString("clear", "left"));
                expect(Css$Ress.clear("inherit")).toEqual(Css$Ress.propertyString("clear", "inherit"));
                
              }));
        test("color", (function () {
                expect(Css$Ress.color("rebeccapurple")).toEqual(Css$Ress.propertyString("color", "rebeccapurple"));
                expect(Css$Ress.color(Css$Ress.rgbX("00ff00"))).toEqual(Css$Ress.propertyString("color", "#00ff00"));
                expect(Css$Ress.color(Css$Ress.rgb(214, 122, 127))).toEqual(Css$Ress.propertyString("color", "rgb(214, 122, 127)"));
                expect(Css$Ress.color(Css$Ress.hsl(Css$Ress.deg(30), Css$Ress.pct(100), Css$Ress.pct(50)))).toEqual(Css$Ress.propertyString("color", "hsl(30deg, 100%, 50%)"));
                expect(Css$Ress.color(Css$Ress.hsla(Css$Ress.deg(30), Css$Ress.pct(100), Css$Ress.pct(50), 0.3))).toEqual(Css$Ress.propertyString("color", "hsla(30deg, 100%, 50%, 0.3)"));
                expect(Css$Ress.color("initial")).toEqual(Css$Ress.colorString("initial"));
                
              }));
        test("cursor", (function () {
                expect(Css$Ress.cursor("auto")).toEqual(Css$Ress.propertyString("cursor", "auto"));
                expect(Css$Ress.cursor("initial")).toEqual(Css$Ress.propertyString("cursor", "initial"));
                expect(Css$Ress.cursor1(Css$Ress.url("image.png"), "default")).toEqual(Css$Ress.propertyString("cursor", "url(\"image.png\"), default"));
                expect(Css$Ress.cursor1({
                            NAME: "url2",
                            VAL: [
                              "image.png",
                              12
                            ]
                          }, "default")).toEqual(Css$Ress.propertyString("cursor", "url(\"image.png\") 12, default"));
                expect(Css$Ress.cursor1({
                            NAME: "url3",
                            VAL: [
                              "image.png",
                              12,
                              24
                            ]
                          }, "default")).toEqual(Css$Ress.propertyString("cursor", "url(\"image.png\") 12 24, default"));
                expect(Css$Ress.cursor2(Css$Ress.url("image.png"), Css$Ress.url("image2.png"), "default")).toEqual(Css$Ress.propertyString("cursor", "url(\"image.png\"), url(\"image2.png\"), default"));
                expect(Css$Ress.cursor3(Css$Ress.url("image.png"), Css$Ress.url("image2.png"), Css$Ress.url("image3.png"), "default")).toEqual(Css$Ress.propertyString("cursor", "url(\"image.png\"), url(\"image2.png\"), url(\"image3.png\"), default"));
                expect(Css$Ress.cursor4(Css$Ress.url("image.png"), Css$Ress.url("image2.png"), Css$Ress.url("image3.png"), Css$Ress.url("image4.png"), "default")).toEqual(Css$Ress.propertyString("cursor", "url(\"image.png\"), url(\"image2.png\"), url(\"image3.png\"), url(\"image4.png\"), default"));
                
              }));
        
      }));

describe("style", (function () {
        test("style", (function () {
                expect(Css$Ress.style([
                            Css$Ress.background(undefined, undefined, undefined, undefined, undefined, undefined, undefined, Css$Ress.url("image.png")),
                            Css$Ress.color(Css$Ress.rgb(255, 255, 255)),
                            Css$Ress.paddingTop(Css$Ress.px(24)),
                            Css$Ress.paddingBottom(Css$Ress.px(24)),
                            Css$Ress.paddingLeft(Css$Ress.px(40)),
                            Css$Ress.paddingRight(Css$Ress.px(40)),
                            Css$Ress.marginNumber(24)
                          ])).toEqual({
                      background: "url(\"image.png\")",
                      color: "rgb(255, 255, 255)",
                      paddingTop: "24px",
                      paddingBottom: "24px",
                      paddingLeft: "40px",
                      paddingRight: "40px",
                      margin: 24
                    });
                
              }));
        
      }));

/*  Not a pure module */
