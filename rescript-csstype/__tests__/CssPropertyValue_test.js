// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var CssBorder$Ress = require("../src/property/CssBorder.js");
var CssCursor$Ress = require("../src/property/CssCursor.js");
var CssMargin$Ress = require("../src/property/CssMargin.js");
var CssPadding$Ress = require("../src/property/CssPadding.js");
var CssBackground$Ress = require("../src/property/CssBackground.js");
var CssFontFamily$Ress = require("../src/property/CssFontFamily.js");
var CssFontWeight$Ress = require("../src/property/CssFontWeight.js");
var CssMarginSide$Ress = require("../src/property/CssMarginSide.js");
var CssBorderColor$Ress = require("../src/property/CssBorderColor.js");
var CssBorderStyle$Ress = require("../src/property/CssBorderStyle.js");
var CssBorderWidth$Ress = require("../src/property/CssBorderWidth.js");
var CssPaddingSide$Ress = require("../src/property/CssPaddingSide.js");
var CssValueHelper$Ress = require("../src/value/CssValueHelper.js");
var CssBackgroundColor$Ress = require("../src/property/CssBackgroundColor.js");
var CssBackgroundImage$Ress = require("../src/property/CssBackgroundImage.js");
var CssBackgroundStyle$Ress = require("../src/property/CssBackgroundStyle.js");
var CssBackgroundPosition$Ress = require("../src/property/CssBackgroundPosition.js");
var CssBackgroundAttachment$Ress = require("../src/property/CssBackgroundAttachment.js");

test("background", (function () {
        expect(CssBackground$Ress.value(undefined, undefined, undefined, undefined, undefined, undefined, undefined, "initial")).toBe("initial");
        expect(CssBackground$Ress.value("red", undefined, undefined, undefined, undefined, undefined, undefined, "initial")).toBe("initial");
        expect(CssBackground$Ress.value(undefined, undefined, undefined, undefined, undefined, undefined, undefined, "red")).toBe("red");
        expect(CssBackground$Ress.value(undefined, undefined, undefined, undefined, undefined, undefined, undefined, CssValueHelper$Ress.rgb(255, 255, 255))).toBe("rgb(255, 255, 255)");
        expect(CssBackground$Ress.value(undefined, undefined, undefined, "repeatY", undefined, undefined, undefined, CssValueHelper$Ress.url("test.jpg"))).toBe("url(\"test.jpg\") repeat-y");
        expect(CssBackground$Ress.value2(CssValueHelper$Ress.linearGradient2(CssValueHelper$Ress.deg(217), CssValueHelper$Ress.rgba(255, 0, 0, 0.8), CssValueHelper$Ress.linearColorStop2(CssValueHelper$Ress.rgba(255, 0, 0, 0), CssValueHelper$Ress.pct(70.71))), CssValueHelper$Ress.linearGradient2(CssValueHelper$Ress.deg(127), CssValueHelper$Ress.rgba(0, 255, 0, 0.8), CssValueHelper$Ress.linearColorStop2(CssValueHelper$Ress.rgba(0, 255, 0, 0), CssValueHelper$Ress.pct(70.71))))).toBe("linear-gradient(217deg, rgba(255, 0, 0, 0.8), rgba(255, 0, 0, 0) 70.71%), linear-gradient(127deg, rgba(0, 255, 0, 0.8), rgba(0, 255, 0, 0) 70.71%)");
        expect(CssBackground$Ress.value3(CssValueHelper$Ress.linearGradient2(CssValueHelper$Ress.deg(217), CssValueHelper$Ress.rgba(255, 0, 0, 0.8), CssValueHelper$Ress.linearColorStop2(CssValueHelper$Ress.rgba(255, 0, 0, 0), CssValueHelper$Ress.pct(70.71))), CssValueHelper$Ress.linearGradient2(CssValueHelper$Ress.deg(127), CssValueHelper$Ress.rgba(0, 255, 0, 0.8), CssValueHelper$Ress.linearColorStop2(CssValueHelper$Ress.rgba(0, 255, 0, 0), CssValueHelper$Ress.pct(70.71))), CssValueHelper$Ress.linearGradient2(CssValueHelper$Ress.deg(217), CssValueHelper$Ress.rgba(255, 0, 0, 0.8), CssValueHelper$Ress.linearColorStop2(CssValueHelper$Ress.rgba(255, 0, 0, 0), CssValueHelper$Ress.pct(70.71))))).toBe("linear-gradient(217deg, rgba(255, 0, 0, 0.8), rgba(255, 0, 0, 0) 70.71%), linear-gradient(127deg, rgba(0, 255, 0, 0.8), rgba(0, 255, 0, 0) 70.71%), linear-gradient(217deg, rgba(255, 0, 0, 0.8), rgba(255, 0, 0, 0) 70.71%)");
        expect(CssBackground$Ress.value4(CssValueHelper$Ress.linearGradient2(CssValueHelper$Ress.deg(217), CssValueHelper$Ress.rgba(255, 0, 0, 0.8), CssValueHelper$Ress.linearColorStop2(CssValueHelper$Ress.rgba(255, 0, 0, 0), CssValueHelper$Ress.pct(70.71))), CssValueHelper$Ress.linearGradient2(CssValueHelper$Ress.deg(127), CssValueHelper$Ress.rgba(0, 255, 0, 0.8), CssValueHelper$Ress.linearColorStop2(CssValueHelper$Ress.rgba(0, 255, 0, 0), CssValueHelper$Ress.pct(70.71))), CssValueHelper$Ress.linearGradient2(CssValueHelper$Ress.deg(217), CssValueHelper$Ress.rgba(255, 0, 0, 0.8), CssValueHelper$Ress.linearColorStop2(CssValueHelper$Ress.rgba(255, 0, 0, 0), CssValueHelper$Ress.pct(70.71))), CssValueHelper$Ress.linearGradient2(CssValueHelper$Ress.deg(127), CssValueHelper$Ress.rgba(0, 255, 0, 0.8), CssValueHelper$Ress.linearColorStop2(CssValueHelper$Ress.rgba(0, 255, 0, 0), CssValueHelper$Ress.pct(70.71))))).toBe("linear-gradient(217deg, rgba(255, 0, 0, 0.8), rgba(255, 0, 0, 0) 70.71%), linear-gradient(127deg, rgba(0, 255, 0, 0.8), rgba(0, 255, 0, 0) 70.71%), linear-gradient(217deg, rgba(255, 0, 0, 0.8), rgba(255, 0, 0, 0) 70.71%), linear-gradient(127deg, rgba(0, 255, 0, 0.8), rgba(0, 255, 0, 0) 70.71%)");
        expect(CssBackground$Ress.value4(CssValueHelper$Ress.bgLayer(undefined, undefined, undefined, "repeat", undefined, undefined, undefined, CssValueHelper$Ress.url("myimage.png")), CssValueHelper$Ress.bgLayer(undefined, undefined, undefined, "repeat", undefined, undefined, undefined, CssValueHelper$Ress.url("myimage.png")), CssValueHelper$Ress.bgLayer(undefined, undefined, undefined, "repeat", undefined, undefined, undefined, CssValueHelper$Ress.url("myimage.png")), CssValueHelper$Ress.bgLayer(undefined, undefined, undefined, "repeat", undefined, undefined, undefined, CssValueHelper$Ress.url("myimage.png")))).toBe("url(\"myimage.png\") repeat, url(\"myimage.png\") repeat, url(\"myimage.png\") repeat, url(\"myimage.png\") repeat");
        
      }));

test("backgroundAttachment", (function () {
        expect(CssBackgroundAttachment$Ress.value("scroll")).toBe("scroll");
        expect(CssBackgroundAttachment$Ress.value2("scroll", "fixed")).toBe("scroll, fixed");
        expect(CssBackgroundAttachment$Ress.value3("scroll", "fixed", "fixed")).toBe("scroll, fixed, fixed");
        expect(CssBackgroundAttachment$Ress.value4("scroll", "fixed", "fixed", "local")).toBe("scroll, fixed, fixed, local");
        
      }));

test("backgroundColor", (function () {
        expect(CssBackgroundColor$Ress.value(CssValueHelper$Ress.rgb(200, 200, 200))).toBe("rgb(200, 200, 200)");
        
      }));

test("backgroundImage", (function () {
        expect(CssBackgroundImage$Ress.value(CssValueHelper$Ress.url("image.png"))).toBe("url(\"image.png\")");
        expect(CssBackgroundImage$Ress.value2(CssValueHelper$Ress.url("image.png"), CssValueHelper$Ress.image(undefined, undefined, CssValueHelper$Ress.url("myimage.jpg")))).toBe("url(\"image.png\"), image(url(\"myimage.jpg\"))");
        expect(CssBackgroundImage$Ress.value3(CssValueHelper$Ress.url("image.png"), CssValueHelper$Ress.image(undefined, undefined, CssValueHelper$Ress.url("myimage.jpg")), CssValueHelper$Ress.linearGradient(undefined, "red"))).toBe("url(\"image.png\"), image(url(\"myimage.jpg\")), linear-gradient(red)");
        expect(CssBackgroundImage$Ress.value4(CssValueHelper$Ress.url("image.png"), CssValueHelper$Ress.image(undefined, undefined, CssValueHelper$Ress.url("myimage.jpg")), CssValueHelper$Ress.linearGradient(undefined, "red"), CssValueHelper$Ress.radialGradient(undefined, undefined, undefined, "blue"))).toBe("url(\"image.png\"), image(url(\"myimage.jpg\")), linear-gradient(red), radial-gradient(blue)");
        
      }));

test("backgroundPosition", (function () {
        expect(CssBackgroundPosition$Ress.value(CssValueHelper$Ress.px(10))).toBe("10px");
        expect(CssBackgroundPosition$Ress.value2(CssValueHelper$Ress.px(10), CssValueHelper$Ress.position2("center", "bottom"))).toBe("10px, center bottom");
        expect(CssBackgroundPosition$Ress.value3(CssValueHelper$Ress.px(10), CssValueHelper$Ress.position2("center", "bottom"), "center")).toBe("10px, center bottom, center");
        expect(CssBackgroundPosition$Ress.value4(CssValueHelper$Ress.px(10), CssValueHelper$Ress.position2("center", "bottom"), CssValueHelper$Ress.pct(10), CssValueHelper$Ress.position4("left", CssValueHelper$Ress.px(10), "top", CssValueHelper$Ress.pct(10)))).toBe("10px, center bottom, 10%, left 10px top 10%");
        
      }));

test("backgroundStyle", (function () {
        expect(CssBackgroundStyle$Ress.value("repeatX")).toBe("repeat-x");
        expect(CssBackgroundStyle$Ress.value2("repeatX", "repeat__repeat")).toBe("repeat-x, repeat repeat");
        expect(CssBackgroundStyle$Ress.value3("repeatX", "repeat__repeat", "noRepeat")).toBe("repeat-x, repeat repeat, no-repeat");
        expect(CssBackgroundStyle$Ress.value4("repeatX", "repeat__repeat", "noRepeat", "space")).toBe("repeat-x, repeat repeat, no-repeat, space");
        
      }));

test("border", (function () {
        expect(CssBorder$Ress.value(undefined, undefined, "solid")).toBe("solid");
        expect(CssBorder$Ress.value(undefined, "red", "dashed")).toBe("red dashed");
        expect(CssBorder$Ress.value(CssValueHelper$Ress.rem(1.0), undefined, "solid")).toBe("1rem solid");
        expect(CssBorder$Ress.value("thick", CssValueHelper$Ress.hexColor("32a1ce"), "double")).toBe("thick #32a1ce double");
        expect(CssBorder$Ress.value(CssValueHelper$Ress.mm(4), CssValueHelper$Ress.rgba(170, 50, 220, 0.6), "ridge")).toBe("4mm rgba(170, 50, 220, 0.6) ridge");
        
      }));

test("borderColor", (function () {
        expect(CssBorderColor$Ress.value("red")).toBe("red");
        expect(CssBorderColor$Ress.value2("red", CssValueHelper$Ress.hexColor("000000ff"))).toBe("red #000000ff");
        expect(CssBorderColor$Ress.value3("red", CssValueHelper$Ress.rgb(255, 255, 255), CssValueHelper$Ress.hsl(360, CssValueHelper$Ress.pct(100), CssValueHelper$Ress.pct(50)))).toBe("red rgb(255, 255, 255) hsl(360, 100%, 50%)");
        expect(CssBorderColor$Ress.value4("blue", CssValueHelper$Ress.rgba(0, 0, 0, 0.5), "red", CssValueHelper$Ress.rgb(255, 255, 255))).toBe("blue rgba(0, 0, 0, 0.5) red rgb(255, 255, 255)");
        
      }));

test("borderStyle", (function () {
        expect(CssBorderStyle$Ress.value("solid")).toBe("solid");
        expect(CssBorderStyle$Ress.value2("solid", "dashed")).toBe("solid dashed");
        expect(CssBorderStyle$Ress.value3("solid", "dashed", "dotted")).toBe("solid dashed dotted");
        expect(CssBorderStyle$Ress.value4("dashed", "solid", "dotted", "inset")).toBe("dashed solid dotted inset");
        
      }));

test("borderWidth", (function () {
        expect(CssBorderWidth$Ress.value(CssValueHelper$Ress.px(1))).toBe("1px");
        expect(CssBorderWidth$Ress.value2("thin", "medium")).toBe("thin medium");
        expect(CssBorderWidth$Ress.value3("thin", "medium", CssValueHelper$Ress.px(2))).toBe("thin medium 2px");
        expect(CssBorderWidth$Ress.value4("medium", CssValueHelper$Ress.px(2), "thin", CssValueHelper$Ress.px(4))).toBe("medium 2px thin 4px");
        
      }));

test("cursor", (function () {
        expect(CssCursor$Ress.value("auto")).toBe("auto");
        expect(CssCursor$Ress.value("initial")).toBe("initial");
        expect(CssCursor$Ress.value1(CssValueHelper$Ress.url("image.png"), "default")).toBe("url(\"image.png\"), default");
        expect(CssCursor$Ress.value2(CssValueHelper$Ress.url("image.png"), CssValueHelper$Ress.url("image2.png"), "default")).toBe("url(\"image.png\"), url(\"image2.png\"), default");
        expect(CssCursor$Ress.value3(CssValueHelper$Ress.url("image.png"), CssValueHelper$Ress.url("image2.png"), CssValueHelper$Ress.url("image3.png"), "default")).toBe("url(\"image.png\"), url(\"image2.png\"), url(\"image3.png\"), default");
        expect(CssCursor$Ress.value4(CssValueHelper$Ress.url("image.png"), CssValueHelper$Ress.url("image2.png"), CssValueHelper$Ress.url("image3.png"), CssValueHelper$Ress.url("image4.png"), "default")).toBe("url(\"image.png\"), url(\"image2.png\"), url(\"image3.png\"), url(\"image4.png\"), default");
        
      }));

test("FontFamily", (function () {
        expect(CssFontFamily$Ress.value("initial")).toBe("initial");
        expect(CssFontFamily$Ress.value("sansSerif")).toBe("sans-serif");
        expect(CssFontFamily$Ress.value({
                    NAME: "Family",
                    VAL: "Gill Sans Extrabold"
                  })).toBe("\"Gill Sans Extrabold\"");
        expect(CssFontFamily$Ress.value2({
                    NAME: "Family",
                    VAL: "Gill Sans Extrabold"
                  }, "sansSerif")).toBe("\"Gill Sans Extrabold\", sans-serif");
        expect(CssFontFamily$Ress.value3({
                    NAME: "Family",
                    VAL: "Roboto"
                  }, {
                    NAME: "Family",
                    VAL: "Helvetica"
                  }, "sansSerif")).toBe("\"Roboto\", \"Helvetica\", sans-serif");
        expect(CssFontFamily$Ress.value4({
                    NAME: "Family",
                    VAL: "Roboto"
                  }, {
                    NAME: "Family",
                    VAL: "Helvetica"
                  }, {
                    NAME: "Family",
                    VAL: "Arial"
                  }, "sansSerif")).toBe("\"Roboto\", \"Helvetica\", \"Arial\", sans-serif");
        
      }));

test("fontWeight", (function () {
        expect(CssFontWeight$Ress.value("initial")).toBe("initial");
        expect(CssFontWeight$Ress.value("bold")).toBe("bold");
        
      }));

var include = CssMarginSide$Ress.MakeValue({});

var value = include.value;

var MarginSide = {
  value: value
};

test("margin", (function () {
        expect(CssMargin$Ress.value(CssValueHelper$Ress.px(24))).toBe("24px");
        expect(CssMargin$Ress.value("initial")).toBe("initial");
        expect(CssMargin$Ress.value2(CssValueHelper$Ress.rem(2), CssValueHelper$Ress.rem(4))).toBe("2rem 4rem");
        expect(CssMargin$Ress.value3(CssValueHelper$Ress.px(10), CssValueHelper$Ress.px(24), CssValueHelper$Ress.px(40))).toBe("10px 24px 40px");
        expect(CssMargin$Ress.value4(CssValueHelper$Ress.px(20), CssValueHelper$Ress.px(40), CssValueHelper$Ress.px(20), CssValueHelper$Ress.px(40))).toBe("20px 40px 20px 40px");
        expect(Curry._1(value, CssValueHelper$Ress.px(24))).toBe("24px");
        expect(Curry._1(value, "initial")).toBe("initial");
        
      }));

var include$1 = CssPaddingSide$Ress.MakeValue({});

var value$1 = include$1.value;

var PaddingSide = {
  value: value$1
};

test("padding", (function () {
        expect(CssPadding$Ress.value(CssValueHelper$Ress.px(24))).toBe("24px");
        expect(CssPadding$Ress.value("initial")).toBe("initial");
        expect(CssPadding$Ress.value2(CssValueHelper$Ress.rem(2), CssValueHelper$Ress.rem(4))).toBe("2rem 4rem");
        expect(CssPadding$Ress.value3(CssValueHelper$Ress.px(10), CssValueHelper$Ress.px(24), CssValueHelper$Ress.px(40))).toBe("10px 24px 40px");
        expect(CssPadding$Ress.value4(CssValueHelper$Ress.px(20), CssValueHelper$Ress.px(40), CssValueHelper$Ress.px(20), CssValueHelper$Ress.px(40))).toBe("20px 40px 20px 40px");
        expect(Curry._1(value$1, CssValueHelper$Ress.px(24))).toBe("24px");
        expect(Curry._1(value$1, "initial")).toBe("initial");
        
      }));

var Background;

var BackgroundAttachment;

var BackgroundColor;

var BackgroundImage;

var BackgroundPosition;

var BackgroundStyle;

var Border;

var BorderColor;

var BorderStyle;

var BorderWidth;

var Cursor;

var FontFamily;

var FontWeight;

var Margin;

var Padding;

exports.Background = Background;
exports.BackgroundAttachment = BackgroundAttachment;
exports.BackgroundColor = BackgroundColor;
exports.BackgroundImage = BackgroundImage;
exports.BackgroundPosition = BackgroundPosition;
exports.BackgroundStyle = BackgroundStyle;
exports.Border = Border;
exports.BorderColor = BorderColor;
exports.BorderStyle = BorderStyle;
exports.BorderWidth = BorderWidth;
exports.Cursor = Cursor;
exports.FontFamily = FontFamily;
exports.FontWeight = FontWeight;
exports.Margin = Margin;
exports.MarginSide = MarginSide;
exports.Padding = Padding;
exports.PaddingSide = PaddingSide;
/*  Not a pure module */
