// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var CssValue$Ress = require("../src/CssValue.js");
var CssFunction$Ress = require("../src/CssFunction.js");
var CssProperty$Ress = require("../src/CssProperty.js");

test("border", (function () {
        expect(CssProperty$Ress.border(undefined, undefined, "dotted")).toEqual(CssProperty$Ress.propertyString("border", "dotted"));
        expect(CssProperty$Ress.border(CssValue$Ress.px(1), undefined, "solid")).toEqual(CssProperty$Ress.propertyString("border", "1px solid"));
        expect(CssProperty$Ress.border(CssValue$Ress.px(1), CssFunction$Ress.rgb(255, 255, 255), "dotted")).toEqual(CssProperty$Ress.propertyString("border", "1px rgb(255, 255, 255) dotted"));
        
      }));

test("borderTop", (function () {
        expect(CssProperty$Ress.borderTop(undefined, undefined, "dotted")).toEqual(CssProperty$Ress.propertyString("borderTop", "dotted"));
        expect(CssProperty$Ress.borderTop(CssValue$Ress.px(1), undefined, "solid")).toEqual(CssProperty$Ress.propertyString("borderTop", "1px solid"));
        expect(CssProperty$Ress.borderTop(CssValue$Ress.px(1), CssFunction$Ress.rgb(255, 255, 255), "dotted")).toEqual(CssProperty$Ress.propertyString("borderTop", "1px rgb(255, 255, 255) dotted"));
        
      }));

test("borderRight", (function () {
        expect(CssProperty$Ress.borderRight(undefined, undefined, "dotted")).toEqual(CssProperty$Ress.propertyString("borderRight", "dotted"));
        expect(CssProperty$Ress.borderRight(CssValue$Ress.px(1), undefined, "solid")).toEqual(CssProperty$Ress.propertyString("borderRight", "1px solid"));
        expect(CssProperty$Ress.borderRight(CssValue$Ress.px(1), CssFunction$Ress.rgb(255, 255, 255), "dotted")).toEqual(CssProperty$Ress.propertyString("borderRight", "1px rgb(255, 255, 255) dotted"));
        
      }));

test("borderBottom", (function () {
        expect(CssProperty$Ress.borderBottom(undefined, undefined, "dotted")).toEqual(CssProperty$Ress.propertyString("borderBottom", "dotted"));
        expect(CssProperty$Ress.borderBottom(CssValue$Ress.px(1), undefined, "solid")).toEqual(CssProperty$Ress.propertyString("borderBottom", "1px solid"));
        expect(CssProperty$Ress.borderBottom(CssValue$Ress.px(1), CssFunction$Ress.rgb(255, 255, 255), "dotted")).toEqual(CssProperty$Ress.propertyString("borderBottom", "1px rgb(255, 255, 255) dotted"));
        
      }));

test("borderLeft", (function () {
        expect(CssProperty$Ress.borderLeft(undefined, undefined, "dotted")).toEqual(CssProperty$Ress.propertyString("borderLeft", "dotted"));
        expect(CssProperty$Ress.borderLeft(CssValue$Ress.px(1), undefined, "solid")).toEqual(CssProperty$Ress.propertyString("borderLeft", "1px solid"));
        expect(CssProperty$Ress.borderLeft(CssValue$Ress.px(1), CssFunction$Ress.rgb(255, 255, 255), "dotted")).toEqual(CssProperty$Ress.propertyString("borderLeft", "1px rgb(255, 255, 255) dotted"));
        
      }));

test("borderWidth", (function () {
        expect(CssProperty$Ress.borderWidth(CssValue$Ress.px(1))).toEqual(CssProperty$Ress.propertyString("borderWidth", "1px"));
        expect(CssProperty$Ress.borderWidth2(CssValue$Ress.px(1), "thin")).toEqual(CssProperty$Ress.propertyString("borderWidth", "1px thin"));
        expect(CssProperty$Ress.borderWidth3("thin", "medium", "thick")).toEqual(CssProperty$Ress.propertyString("borderWidth", "thin medium thick"));
        expect(CssProperty$Ress.borderWidth4(CssValue$Ress.px(1), "thin", CssValue$Ress.px(1), "thick")).toEqual(CssProperty$Ress.propertyString("borderWidth", "1px thin 1px thick"));
        expect(CssProperty$Ress.borderTopWidth(CssValue$Ress.px(1))).toEqual(CssProperty$Ress.propertyString("borderTopWidth", "1px"));
        expect(CssProperty$Ress.borderRightWidth(CssValue$Ress.px(1))).toEqual(CssProperty$Ress.propertyString("borderRightWidth", "1px"));
        expect(CssProperty$Ress.borderBottomWidth(CssValue$Ress.px(1))).toEqual(CssProperty$Ress.propertyString("borderBottomWidth", "1px"));
        expect(CssProperty$Ress.borderLeftWidth(CssValue$Ress.px(1))).toEqual(CssProperty$Ress.propertyString("borderLeftWidth", "1px"));
        
      }));

test("borderStyle", (function () {
        expect(CssProperty$Ress.borderStyle("unset")).toEqual(CssProperty$Ress.propertyString("borderStyle", "unset"));
        expect(CssProperty$Ress.borderStyle2("solid", "dotted")).toEqual(CssProperty$Ress.propertyString("borderStyle", "solid dotted"));
        expect(CssProperty$Ress.borderStyle3("solid", "inset", "dotted")).toEqual(CssProperty$Ress.propertyString("borderStyle", "solid inset dotted"));
        expect(CssProperty$Ress.borderStyle4("solid", "double", "dotted", "inset")).toEqual(CssProperty$Ress.propertyString("borderStyle", "solid double dotted inset"));
        expect(CssProperty$Ress.borderTopStyle("unset")).toEqual(CssProperty$Ress.propertyString("borderTopStyle", "unset"));
        expect(CssProperty$Ress.borderRightStyle("unset")).toEqual(CssProperty$Ress.propertyString("borderRightStyle", "unset"));
        expect(CssProperty$Ress.borderBottomStyle("unset")).toEqual(CssProperty$Ress.propertyString("borderBottomStyle", "unset"));
        expect(CssProperty$Ress.borderLeftStyle("unset")).toEqual(CssProperty$Ress.propertyString("borderLeftStyle", "unset"));
        
      }));

test("borderColor", (function () {
        expect(CssProperty$Ress.borderColor(CssFunction$Ress.hsl(CssValue$Ress.deg(360), CssValue$Ress.pct(50), CssValue$Ress.pct(50)))).toEqual(CssProperty$Ress.propertyString("borderColor", "hsl(360deg, 50%, 50%)"));
        expect(CssProperty$Ress.borderColor2("red", "blue")).toEqual(CssProperty$Ress.propertyString("borderColor", "red blue"));
        expect(CssProperty$Ress.borderColor3(CssFunction$Ress.rgbX("000000"), CssFunction$Ress.rgbX("000000"), CssFunction$Ress.rgbX("111111"))).toEqual(CssProperty$Ress.propertyString("borderColor", "#000000 #000000 #111111"));
        expect(CssProperty$Ress.borderColor4("red", "turquoise", "purple", "deeppink")).toEqual(CssProperty$Ress.propertyString("borderColor", "red turquoise purple deeppink"));
        expect(CssProperty$Ress.borderTopColor(CssFunction$Ress.hsl(CssValue$Ress.deg(360), CssValue$Ress.pct(50), CssValue$Ress.pct(50)))).toEqual(CssProperty$Ress.propertyString("borderTopColor", "hsl(360deg, 50%, 50%)"));
        expect(CssProperty$Ress.borderRightColor(CssFunction$Ress.hsl(CssValue$Ress.deg(360), CssValue$Ress.pct(50), CssValue$Ress.pct(50)))).toEqual(CssProperty$Ress.propertyString("borderRightColor", "hsl(360deg, 50%, 50%)"));
        expect(CssProperty$Ress.borderBottomColor(CssFunction$Ress.hsl(CssValue$Ress.deg(360), CssValue$Ress.pct(50), CssValue$Ress.pct(50)))).toEqual(CssProperty$Ress.propertyString("borderBottomColor", "hsl(360deg, 50%, 50%)"));
        expect(CssProperty$Ress.borderLeftColor(CssFunction$Ress.hsl(CssValue$Ress.deg(360), CssValue$Ress.pct(50), CssValue$Ress.pct(50)))).toEqual(CssProperty$Ress.propertyString("borderLeftColor", "hsl(360deg, 50%, 50%)"));
        
      }));

test("background", (function () {
        expect(CssProperty$Ress.background(undefined, undefined, undefined, undefined, undefined, undefined, undefined, "initial")).toEqual(CssProperty$Ress.propertyString("background", "initial"));
        expect(CssProperty$Ress.background("red", undefined, undefined, undefined, undefined, undefined, undefined, "initial")).toEqual(CssProperty$Ress.propertyString("background", "initial"));
        expect(CssProperty$Ress.background(undefined, undefined, undefined, undefined, undefined, undefined, undefined, "red")).toEqual(CssProperty$Ress.propertyString("background", "red"));
        expect(CssProperty$Ress.background(undefined, undefined, undefined, undefined, undefined, undefined, undefined, CssFunction$Ress.rgb(255, 255, 255))).toEqual(CssProperty$Ress.propertyString("background", "rgb(255, 255, 255)"));
        expect(CssProperty$Ress.background(undefined, undefined, undefined, "repeat-y", undefined, undefined, undefined, CssFunction$Ress.url("test.jpg"))).toEqual(CssProperty$Ress.propertyString("background", "url(\"test.jpg\") repeat-y"));
        expect(CssProperty$Ress.background2(CssFunction$Ress.linearGradient2(CssValue$Ress.deg(217), CssFunction$Ress.rgba(255, 0, 0, 0.8), CssFunction$Ress.linearColorStop2(CssFunction$Ress.rgba(255, 0, 0, 0), CssValue$Ress.pct(70.71))), CssFunction$Ress.linearGradient2(CssValue$Ress.deg(127), CssFunction$Ress.rgba(0, 255, 0, 0.8), CssFunction$Ress.linearColorStop2(CssFunction$Ress.rgba(0, 255, 0, 0), CssValue$Ress.pct(70.71))))).toEqual(CssProperty$Ress.propertyString("background", "linear-gradient(217deg, rgba(255, 0, 0, 0.8), rgba(255, 0, 0, 0) 70.71%), linear-gradient(127deg, rgba(0, 255, 0, 0.8), rgba(0, 255, 0, 0) 70.71%)"));
        expect(CssProperty$Ress.background3(CssFunction$Ress.linearGradient2(CssValue$Ress.deg(217), CssFunction$Ress.rgba(255, 0, 0, 0.8), CssFunction$Ress.linearColorStop2(CssFunction$Ress.rgba(255, 0, 0, 0), CssValue$Ress.pct(70.71))), CssFunction$Ress.linearGradient2(CssValue$Ress.deg(127), CssFunction$Ress.rgba(0, 255, 0, 0.8), CssFunction$Ress.linearColorStop2(CssFunction$Ress.rgba(0, 255, 0, 0), CssValue$Ress.pct(70.71))), CssFunction$Ress.linearGradient2(CssValue$Ress.deg(217), CssFunction$Ress.rgba(255, 0, 0, 0.8), CssFunction$Ress.linearColorStop2(CssFunction$Ress.rgba(255, 0, 0, 0), CssValue$Ress.pct(70.71))))).toEqual(CssProperty$Ress.propertyString("background", "linear-gradient(217deg, rgba(255, 0, 0, 0.8), rgba(255, 0, 0, 0) 70.71%), linear-gradient(127deg, rgba(0, 255, 0, 0.8), rgba(0, 255, 0, 0) 70.71%), linear-gradient(217deg, rgba(255, 0, 0, 0.8), rgba(255, 0, 0, 0) 70.71%)"));
        expect(CssProperty$Ress.background4(CssFunction$Ress.linearGradient2(CssValue$Ress.deg(217), CssFunction$Ress.rgba(255, 0, 0, 0.8), CssFunction$Ress.linearColorStop2(CssFunction$Ress.rgba(255, 0, 0, 0), CssValue$Ress.pct(70.71))), CssFunction$Ress.linearGradient2(CssValue$Ress.deg(127), CssFunction$Ress.rgba(0, 255, 0, 0.8), CssFunction$Ress.linearColorStop2(CssFunction$Ress.rgba(0, 255, 0, 0), CssValue$Ress.pct(70.71))), CssFunction$Ress.linearGradient2(CssValue$Ress.deg(217), CssFunction$Ress.rgba(255, 0, 0, 0.8), CssFunction$Ress.linearColorStop2(CssFunction$Ress.rgba(255, 0, 0, 0), CssValue$Ress.pct(70.71))), CssFunction$Ress.linearGradient2(CssValue$Ress.deg(127), CssFunction$Ress.rgba(0, 255, 0, 0.8), CssFunction$Ress.linearColorStop2(CssFunction$Ress.rgba(0, 255, 0, 0), CssValue$Ress.pct(70.71))))).toEqual(CssProperty$Ress.propertyString("background", "linear-gradient(217deg, rgba(255, 0, 0, 0.8), rgba(255, 0, 0, 0) 70.71%), linear-gradient(127deg, rgba(0, 255, 0, 0.8), rgba(0, 255, 0, 0) 70.71%), linear-gradient(217deg, rgba(255, 0, 0, 0.8), rgba(255, 0, 0, 0) 70.71%), linear-gradient(127deg, rgba(0, 255, 0, 0.8), rgba(0, 255, 0, 0) 70.71%)"));
        expect(CssProperty$Ress.background4(CssValue$Ress.bgLayer(undefined, undefined, undefined, "repeat", undefined, undefined, undefined, CssFunction$Ress.url("myimage.png")), CssValue$Ress.bgLayer(undefined, undefined, undefined, "repeat", undefined, undefined, undefined, CssFunction$Ress.url("myimage.png")), CssValue$Ress.bgLayer(undefined, undefined, undefined, "repeat", undefined, undefined, undefined, CssFunction$Ress.url("myimage.png")), CssValue$Ress.bgLayer(undefined, undefined, undefined, "repeat", undefined, undefined, undefined, CssFunction$Ress.url("myimage.png")))).toEqual(CssProperty$Ress.propertyString("background", "url(\"myimage.png\") repeat, url(\"myimage.png\") repeat, url(\"myimage.png\") repeat, url(\"myimage.png\") repeat"));
        
      }));

test("backgroundAttachment", (function () {
        expect(CssProperty$Ress.backgroundAttachment("scroll")).toEqual(CssProperty$Ress.propertyString("backgroundAttachment", "scroll"));
        expect(CssProperty$Ress.backgroundAttachment2("scroll", "fixed")).toEqual(CssProperty$Ress.propertyString("backgroundAttachment", "scroll, fixed"));
        expect(CssProperty$Ress.backgroundAttachment3("scroll", "fixed", "fixed")).toEqual(CssProperty$Ress.propertyString("backgroundAttachment", "scroll, fixed, fixed"));
        expect(CssProperty$Ress.backgroundAttachment4("scroll", "fixed", "fixed", "local")).toEqual(CssProperty$Ress.propertyString("backgroundAttachment", "scroll, fixed, fixed, local"));
        
      }));

test("backgroundColor", (function () {
        expect(CssProperty$Ress.backgroundColor(CssFunction$Ress.rgb(200, 200, 200))).toEqual(CssProperty$Ress.propertyString("backgroundColor", "rgb(200, 200, 200)"));
        
      }));

test("backgroundImage", (function () {
        expect(CssProperty$Ress.backgroundImage(CssFunction$Ress.url("image.png"))).toEqual(CssProperty$Ress.propertyString("backgroundImage", "url(\"image.png\")"));
        expect(CssProperty$Ress.backgroundImage2(CssFunction$Ress.url("image.png"), CssFunction$Ress.image(undefined, undefined, CssFunction$Ress.url("myimage.jpg")))).toEqual(CssProperty$Ress.propertyString("backgroundImage", "url(\"image.png\"), image(url(\"myimage.jpg\"))"));
        expect(CssProperty$Ress.backgroundImage3(CssFunction$Ress.url("image.png"), CssFunction$Ress.image(undefined, undefined, CssFunction$Ress.url("myimage.jpg")), CssFunction$Ress.linearGradient(undefined, "red"))).toEqual(CssProperty$Ress.propertyString("backgroundImage", "url(\"image.png\"), image(url(\"myimage.jpg\")), linear-gradient(red)"));
        expect(CssProperty$Ress.backgroundImage4(CssFunction$Ress.url("image.png"), CssFunction$Ress.image(undefined, undefined, CssFunction$Ress.url("myimage.jpg")), CssFunction$Ress.linearGradient(undefined, "red"), CssFunction$Ress.radialGradient(undefined, undefined, undefined, "blue"))).toEqual(CssProperty$Ress.propertyString("backgroundImage", "url(\"image.png\"), image(url(\"myimage.jpg\")), linear-gradient(red), radial-gradient(blue)"));
        
      }));

test("backgroundPosition", (function () {
        expect(CssProperty$Ress.backgroundPosition(CssValue$Ress.px(10))).toEqual(CssProperty$Ress.propertyString("backgroundPosition", "10px"));
        expect(CssProperty$Ress.backgroundPosition2(CssValue$Ress.px(10), CssValue$Ress.position2("center", "bottom"))).toEqual(CssProperty$Ress.propertyString("backgroundPosition", "10px, center bottom"));
        expect(CssProperty$Ress.backgroundPosition3(CssValue$Ress.px(10), CssValue$Ress.position2("center", "bottom"), "center")).toEqual(CssProperty$Ress.propertyString("backgroundPosition", "10px, center bottom, center"));
        expect(CssProperty$Ress.backgroundPosition4(CssValue$Ress.px(10), CssValue$Ress.position2("center", "bottom"), CssValue$Ress.pct(10), CssValue$Ress.position4("left", CssValue$Ress.px(10), "top", CssValue$Ress.pct(10)))).toEqual(CssProperty$Ress.propertyString("backgroundPosition", "10px, center bottom, 10%, left 10px top 10%"));
        
      }));

test("backgroundStyle", (function () {
        expect(CssProperty$Ress.backgroundStyle("repeat-x")).toEqual(CssProperty$Ress.propertyString("backgroundStyle", "repeat-x"));
        expect(CssProperty$Ress.backgroundStyle2("repeat-x", "repeat repeat")).toEqual(CssProperty$Ress.propertyString("backgroundStyle", "repeat-x, repeat repeat"));
        expect(CssProperty$Ress.backgroundStyle3("repeat-x", "repeat repeat", "no-repeat")).toEqual(CssProperty$Ress.propertyString("backgroundStyle", "repeat-x, repeat repeat, no-repeat"));
        expect(CssProperty$Ress.backgroundStyle4("repeat-x", "repeat repeat", "no-repeat", "space")).toEqual(CssProperty$Ress.propertyString("backgroundStyle", "repeat-x, repeat repeat, no-repeat, space"));
        
      }));

test("margin", (function () {
        expect(CssProperty$Ress.margin(CssValue$Ress.px(24))).toEqual(CssProperty$Ress.propertyString("margin", "24px"));
        expect(CssProperty$Ress.margin("initial")).toEqual(CssProperty$Ress.propertyString("margin", "initial"));
        expect(CssProperty$Ress.margin2(CssValue$Ress.rem(2), CssValue$Ress.rem(4))).toEqual(CssProperty$Ress.propertyString("margin", "2rem 4rem"));
        expect(CssProperty$Ress.margin3(CssValue$Ress.px(10), CssValue$Ress.px(24), CssValue$Ress.px(40))).toEqual(CssProperty$Ress.propertyString("margin", "10px 24px 40px"));
        expect(CssProperty$Ress.margin4(CssValue$Ress.px(20), CssValue$Ress.px(40), CssValue$Ress.px(20), CssValue$Ress.px(40))).toEqual(CssProperty$Ress.propertyString("margin", "20px 40px 20px 40px"));
        expect(CssProperty$Ress.marginTop(CssValue$Ress.px(24))).toEqual(CssProperty$Ress.propertyString("marginTop", "24px"));
        expect(CssProperty$Ress.marginTop("initial")).toEqual(CssProperty$Ress.propertyString("marginTop", "initial"));
        expect(CssProperty$Ress.marginRight(CssValue$Ress.px(24))).toEqual(CssProperty$Ress.propertyString("marginRight", "24px"));
        expect(CssProperty$Ress.marginRight("initial")).toEqual(CssProperty$Ress.propertyString("marginRight", "initial"));
        expect(CssProperty$Ress.marginBottom(CssValue$Ress.px(24))).toEqual(CssProperty$Ress.propertyString("marginBottom", "24px"));
        expect(CssProperty$Ress.marginBottom("initial")).toEqual(CssProperty$Ress.propertyString("marginBottom", "initial"));
        expect(CssProperty$Ress.marginLeft(CssValue$Ress.px(24))).toEqual(CssProperty$Ress.propertyString("marginLeft", "24px"));
        expect(CssProperty$Ress.marginLeft("initial")).toEqual(CssProperty$Ress.propertyString("marginLeft", "initial"));
        
      }));

test("padding", (function () {
        expect(CssProperty$Ress.padding(CssValue$Ress.px(24))).toEqual(CssProperty$Ress.propertyString("padding", "24px"));
        expect(CssProperty$Ress.padding("initial")).toEqual(CssProperty$Ress.propertyString("padding", "initial"));
        expect(CssProperty$Ress.padding2(CssValue$Ress.rem(2), CssValue$Ress.rem(4))).toEqual(CssProperty$Ress.propertyString("padding", "2rem 4rem"));
        expect(CssProperty$Ress.padding3(CssValue$Ress.px(10), CssValue$Ress.px(24), CssValue$Ress.px(40))).toEqual(CssProperty$Ress.propertyString("padding", "10px 24px 40px"));
        expect(CssProperty$Ress.padding4(CssValue$Ress.px(20), CssValue$Ress.px(40), CssValue$Ress.px(20), CssValue$Ress.px(40))).toEqual(CssProperty$Ress.propertyString("padding", "20px 40px 20px 40px"));
        expect(CssProperty$Ress.paddingTop(CssValue$Ress.px(24))).toEqual(CssProperty$Ress.propertyString("paddingTop", "24px"));
        expect(CssProperty$Ress.paddingTop("initial")).toEqual(CssProperty$Ress.propertyString("paddingTop", "initial"));
        expect(CssProperty$Ress.paddingRight(CssValue$Ress.px(24))).toEqual(CssProperty$Ress.propertyString("paddingRight", "24px"));
        expect(CssProperty$Ress.paddingRight("initial")).toEqual(CssProperty$Ress.propertyString("paddingRight", "initial"));
        expect(CssProperty$Ress.paddingBottom(CssValue$Ress.px(24))).toEqual(CssProperty$Ress.propertyString("paddingBottom", "24px"));
        expect(CssProperty$Ress.paddingBottom("initial")).toEqual(CssProperty$Ress.propertyString("paddingBottom", "initial"));
        expect(CssProperty$Ress.paddingLeft(CssValue$Ress.px(24))).toEqual(CssProperty$Ress.propertyString("paddingLeft", "24px"));
        expect(CssProperty$Ress.paddingLeft("initial")).toEqual(CssProperty$Ress.propertyString("paddingLeft", "initial"));
        
      }));

test("clear", (function () {
        expect(CssProperty$Ress.clear("none")).toEqual(CssProperty$Ress.propertyString("clear", "none"));
        expect(CssProperty$Ress.clear("left")).toEqual(CssProperty$Ress.propertyString("clear", "left"));
        expect(CssProperty$Ress.clear("inherit")).toEqual(CssProperty$Ress.propertyString("clear", "inherit"));
        
      }));

test("color", (function () {
        expect(CssProperty$Ress.color("rebeccapurple")).toEqual(CssProperty$Ress.propertyString("color", "rebeccapurple"));
        expect(CssProperty$Ress.color(CssFunction$Ress.rgbX("00ff00"))).toEqual(CssProperty$Ress.propertyString("color", "#00ff00"));
        expect(CssProperty$Ress.color(CssFunction$Ress.rgb(214, 122, 127))).toEqual(CssProperty$Ress.propertyString("color", "rgb(214, 122, 127)"));
        expect(CssProperty$Ress.color(CssFunction$Ress.hsl(CssValue$Ress.deg(30), CssValue$Ress.pct(100), CssValue$Ress.pct(50)))).toEqual(CssProperty$Ress.propertyString("color", "hsl(30deg, 100%, 50%)"));
        expect(CssProperty$Ress.color(CssFunction$Ress.hsla(CssValue$Ress.deg(30), CssValue$Ress.pct(100), CssValue$Ress.pct(50), 0.3))).toEqual(CssProperty$Ress.propertyString("color", "hsla(30deg, 100%, 50%, 0.3)"));
        expect(CssProperty$Ress.color("initial")).toEqual(CssProperty$Ress.colorString("initial"));
        
      }));

test("cursor", (function () {
        expect(CssProperty$Ress.cursor("auto")).toEqual(CssProperty$Ress.propertyString("cursor", "auto"));
        expect(CssProperty$Ress.cursor("initial")).toEqual(CssProperty$Ress.propertyString("cursor", "initial"));
        expect(CssProperty$Ress.cursor1(CssFunction$Ress.url("image.png"), "default")).toEqual(CssProperty$Ress.propertyString("cursor", "url(\"image.png\"), default"));
        expect(CssProperty$Ress.cursor1({
                    NAME: "url2",
                    VAL: [
                      "image.png",
                      12
                    ]
                  }, "default")).toEqual(CssProperty$Ress.propertyString("cursor", "url(\"image.png\") 12, default"));
        expect(CssProperty$Ress.cursor1({
                    NAME: "url3",
                    VAL: [
                      "image.png",
                      12,
                      24
                    ]
                  }, "default")).toEqual(CssProperty$Ress.propertyString("cursor", "url(\"image.png\") 12 24, default"));
        expect(CssProperty$Ress.cursor2(CssFunction$Ress.url("image.png"), CssFunction$Ress.url("image2.png"), "default")).toEqual(CssProperty$Ress.propertyString("cursor", "url(\"image.png\"), url(\"image2.png\"), default"));
        expect(CssProperty$Ress.cursor3(CssFunction$Ress.url("image.png"), CssFunction$Ress.url("image2.png"), CssFunction$Ress.url("image3.png"), "default")).toEqual(CssProperty$Ress.propertyString("cursor", "url(\"image.png\"), url(\"image2.png\"), url(\"image3.png\"), default"));
        expect(CssProperty$Ress.cursor4(CssFunction$Ress.url("image.png"), CssFunction$Ress.url("image2.png"), CssFunction$Ress.url("image3.png"), CssFunction$Ress.url("image4.png"), "default")).toEqual(CssProperty$Ress.propertyString("cursor", "url(\"image.png\"), url(\"image2.png\"), url(\"image3.png\"), url(\"image4.png\"), default"));
        
      }));

/*  Not a pure module */
