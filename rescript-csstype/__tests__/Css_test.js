// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Jss = require("jss").default;
var Curry = require("rescript/lib/js/curry.js");
var Css$Ress = require("../src/Css.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var CssColor$Ress = require("../src/property_value/CssColor.js");
var CssMargin$Ress = require("../src/property_value/CssMargin.js");
var CssFontFace$Ress = require("../src/CssFontFace.js");
var JssPresetDefault = require("jss-preset-default").default;

Jss.setup(JssPresetDefault());

test("styles", (function () {
        expect(Curry._1(Css$Ress.styles, [
                    Curry._2(Css$Ress.selector, "wrapper", [
                          Css$Ress.background(undefined, undefined, undefined, undefined, undefined, undefined, undefined, Css$Ress.url("image.png")),
                          Css$Ress.color(Css$Ress.rgb(255, 255, 255)),
                          Css$Ress.paddingTop(Css$Ress.px(24)),
                          Css$Ress.paddingBottom(Css$Ress.px(24)),
                          Css$Ress.paddingLeft(Css$Ress.px(40)),
                          Css$Ress.paddingRight(Css$Ress.px(40)),
                          Css$Ress.marginNumber(24)
                        ]),
                    Curry._2(Css$Ress.selector, "button", [
                          Css$Ress.color(Css$Ress.hsla(Css$Ress.deg(360), Css$Ress.pct(100), Css$Ress.pct(50), 0.5)),
                          Curry._1(Css$Ress.hover, [Css$Ress.background(undefined, undefined, undefined, undefined, undefined, undefined, undefined, "blue")])
                        ]),
                    Curry._2(Css$Ress.selector, "tab", [Css$Ress.margin2Number(24, 24)]),
                    Curry._2(Css$Ress.selector, "tabRed", [
                          Css$Ress.important(Css$Ress.margin2Number(24, 24)),
                          Css$Ress.important(Css$Ress.property("background", [
                                    "url(\"image.png\")",
                                    "url(\"image.png\")"
                                  ]))
                        ]),
                    Css$Ress.fontFace([CssFontFace$Ress.fontDisplay("auto")]),
                    Curry._1(Css$Ress.hover, [Css$Ress.color("blue")])
                  ])).toEqual({
              wrapper: {
                background: "url(\"image.png\")",
                color: "rgb(255, 255, 255)",
                paddingTop: "24px",
                paddingBottom: "24px",
                paddingLeft: "40px",
                paddingRight: "40px",
                margin: 24
              },
              button: {
                color: "hsla(360deg, 100%, 50%, 0.5)",
                "&:hover": {
                  background: "blue"
                }
              },
              tab: {
                margin: [[
                    24,
                    24
                  ]]
              },
              tabRed: {
                margin: [
                  [
                    24,
                    24
                  ],
                  "!important"
                ],
                background: [
                  "url(\"image.png\")",
                  "url(\"image.png\")",
                  "!important"
                ]
              },
              "@font-face": {
                fontDisplay: "auto"
              },
              "@global :hover": {
                color: "blue"
              }
            });
        
      }));

test("styles snapshot", (function () {
        var stylesObj = Curry._1(Css$Ress.styles, [
              Curry._2(Css$Ress.selector, "wrapper", [
                    Css$Ress.background(undefined, undefined, undefined, undefined, undefined, undefined, undefined, Css$Ress.url("image.png")),
                    Css$Ress.color(Css$Ress.rgb(255, 255, 255)),
                    Css$Ress.paddingTop(Css$Ress.px(24)),
                    Css$Ress.paddingBottom(Css$Ress.px(24)),
                    Css$Ress.paddingLeft(Css$Ress.px(40)),
                    Css$Ress.paddingRight(Css$Ress.px(40)),
                    Css$Ress.marginNumber(24)
                  ]),
              Curry._2(Css$Ress.selector, "button", [
                    Css$Ress.color(Css$Ress.hsla(Css$Ress.deg(360), Css$Ress.pct(100), Css$Ress.pct(50), 0.5)),
                    Curry._1(Css$Ress.hover, [Css$Ress.background(undefined, undefined, undefined, undefined, undefined, undefined, undefined, "blue")])
                  ]),
              Curry._2(Css$Ress.selector, "tab", [
                    Css$Ress.colorFn(function (data) {
                          return Belt_Option.map(data.color, CssColor$Ress.value);
                        }),
                    Css$Ress.marginFn(function (data) {
                          return Belt_Option.map(data.space, (function (space) {
                                        return CssMargin$Ress.number2(space, space);
                                      }));
                        })
                  ]),
              Curry._2(Css$Ress.selector, "tabRed", [
                    Css$Ress.important(Css$Ress.marginFn(function (data) {
                              return Belt_Option.map(data.space, (function (space) {
                                            return CssMargin$Ress.number2(space, space);
                                          }));
                            })),
                    Css$Ress.important(Css$Ress.property("background", [
                              "url(\"image.png\")",
                              "url(\"image.png\")"
                            ]))
                  ]),
              Css$Ress.fontFace([CssFontFace$Ress.fontDisplay("auto")]),
              Curry._1(Css$Ress.hover, [Css$Ress.color("blue")])
            ]);
        var data = {
          color: "red",
          space: 24
        };
        expect(Jss.createStyleSheet(stylesObj).update(data).toString()).toMatchSnapshot();
        
      }));

/*  Not a pure module */
