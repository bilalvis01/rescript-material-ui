// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';


function Make(Type) {
  var make = function (declaration) {
    var variant = declaration.NAME;
    if (variant === "FontFamilyFn") {
      return [
              "fontFamily",
              declaration.VAL
            ];
    }
    if (variant === "BorderTopWidthFn") {
      return [
              "borderTopWidth",
              declaration.VAL
            ];
    }
    if (variant === "PaddingLeftFn") {
      return [
              "paddingLeft",
              declaration.VAL
            ];
    }
    if (variant === "PaddingBottomFn") {
      return [
              "paddingBottom",
              declaration.VAL
            ];
    }
    if (variant === "MarginBottomFn") {
      return [
              "marginBottom",
              declaration.VAL
            ];
    }
    if (variant === "BackgroundImageFn") {
      return [
              "backgroundImage",
              declaration.VAL
            ];
    }
    if (variant === "BackgroundFn") {
      return [
              "background",
              declaration.VAL
            ];
    }
    if (variant === "BackgroundAttachmentFn") {
      return [
              "backgroundAttachment",
              declaration.VAL
            ];
    }
    if (variant === "BorderLeftWidthFn") {
      return [
              "borderLeftWidth",
              declaration.VAL
            ];
    }
    if (variant === "BorderRightColorFn") {
      return [
              "borderRightColor",
              declaration.VAL
            ];
    }
    if (variant === "BorderColorFn") {
      return [
              "borderColor",
              declaration.VAL
            ];
    }
    if (variant === "BorderBottomColorFn") {
      return [
              "borderBottomColor",
              declaration.VAL
            ];
    }
    if (variant === "BackgroundPositionFn") {
      return [
              "backgroundPosition",
              declaration.VAL
            ];
    }
    if (variant === "FontWeightFn") {
      return [
              "fontWeight",
              declaration.VAL
            ];
    }
    if (variant === "ClearFn") {
      return [
              "clear",
              declaration.VAL
            ];
    }
    if (variant === "BorderRightStyleFn") {
      return [
              "borderRightStyle",
              declaration.VAL
            ];
    }
    if (variant === "BorderStyleFn") {
      return [
              "border",
              declaration.VAL
            ];
    }
    if (variant === "BorderBottomStyleFn") {
      return [
              "borderBottomStyle",
              declaration.VAL
            ];
    }
    if (variant === "BorderTopFn") {
      return [
              "borderTop",
              declaration.VAL
            ];
    }
    if (variant === "BorderTopColorFn") {
      return [
              "borderTopColor",
              declaration.VAL
            ];
    }
    if (variant === "BackgroundColorFn") {
      return [
              "backgroundColor",
              declaration.VAL
            ];
    }
    if (variant === "PaddingTopFn") {
      return [
              "paddingTop",
              declaration.VAL
            ];
    }
    if (variant === "CursorFn") {
      return [
              "cursor",
              declaration.VAL
            ];
    }
    if (variant === "PaddingFn") {
      return [
              "padding",
              declaration.VAL
            ];
    }
    if (variant === "BorderRightFn") {
      return [
              "borderRight",
              declaration.VAL
            ];
    }
    if (variant === "BorderBottomFn") {
      return [
              "borderBottom",
              declaration.VAL
            ];
    }
    if (variant === "BorderTopStyleFn") {
      return [
              "borderTopStyle",
              declaration.VAL
            ];
    }
    if (variant === "BackgroundStyleFn") {
      return [
              "backgroundStyle",
              declaration.VAL
            ];
    }
    if (variant === "MarginFn") {
      return [
              "margin",
              declaration.VAL
            ];
    }
    if (variant === "MarginRightFn") {
      return [
              "marginRight",
              declaration.VAL
            ];
    }
    if (variant === "BorderLeftColorFn") {
      return [
              "borderLeftColor",
              declaration.VAL
            ];
    }
    if (variant === "BorderRightWidthFn") {
      return [
              "borderRightWidth",
              declaration.VAL
            ];
    }
    if (variant === "BorderWidthFn") {
      return [
              "boderWidth",
              declaration.VAL
            ];
    }
    if (variant === "PaddingRightFn") {
      return [
              "paddingRight",
              declaration.VAL
            ];
    }
    if (variant === "BorderBottomWidthFn") {
      return [
              "borderBottomWidth",
              declaration.VAL
            ];
    }
    if (variant === "BorderFn") {
      return [
              "border",
              declaration.VAL
            ];
    }
    if (variant !== "DeclarationFn") {
      if (variant === "BorderLeftStyleFn") {
        return [
                "borderLeftStyle",
                declaration.VAL
              ];
      } else if (variant === "ColorFn") {
        return [
                "color",
                declaration.VAL
              ];
      } else if (variant === "MarginLeftFn") {
        return [
                "marginLeft",
                declaration.VAL
              ];
      } else if (variant === "BorderLeftFn") {
        return [
                "borderLeft",
                declaration.VAL
              ];
      } else {
        return [
                "marginTop",
                declaration.VAL
              ];
      }
    }
    var match = declaration.VAL;
    return [
            match[0],
            match[1]
          ];
  };
  return {
          make: make
        };
}

exports.Make = Make;
/* No side effect */
