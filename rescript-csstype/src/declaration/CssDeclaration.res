type t = (string, CssDeclarationConstructor.boxValue);

let make = declaration => {
  switch declaration {
  | #Declaration(name, value) => (name, value)
  | #Border(value) => ("border", CssDeclarationConstructor.BoxValue(value))
  | #BorderTop(value) => ("borderTop", CssDeclarationConstructor.BoxValue(value))
  | #BorderRight(value) => ("borderRight", CssDeclarationConstructor.BoxValue(value))
  | #BorderBottom(value) => ("borderBottom", CssDeclarationConstructor.BoxValue(value))
  | #BorderLeft(value) => ("borderLeft", CssDeclarationConstructor.BoxValue(value))
  | #BorderStyle(value) => ("border", CssDeclarationConstructor.BoxValue(value))
  | #BorderTopStyle(value) => ("borderTopStyle", CssDeclarationConstructor.BoxValue(value))
  | #BorderRightStyle(value) => ("borderRightStyle", CssDeclarationConstructor.BoxValue(value))
  | #BorderBottomStyle(value) => ("borderBottomStyle", CssDeclarationConstructor.BoxValue(value))
  | #BorderLeftStyle(value) => ("borderLeftStyle", CssDeclarationConstructor.BoxValue(value))
  | #BorderWidth(value) => ("boderWidth", CssDeclarationConstructor.BoxValue(value))
  | #BorderTopWidth(value) => ("borderTopWidth", CssDeclarationConstructor.BoxValue(value))
  | #BorderRightWidth(value) => ("borderRightWidth", CssDeclarationConstructor.BoxValue(value))
  | #BorderBottomWidth(value) => ("borderBottomWidth", CssDeclarationConstructor.BoxValue(value))
  | #BorderLeftWidth(value) => ("borderLeftWidth", CssDeclarationConstructor.BoxValue(value))
  | #BorderColor(value) => ("borderColor", CssDeclarationConstructor.BoxValue(value))
  | #BorderTopColor(value) => ("borderTopColor", CssDeclarationConstructor.BoxValue(value))
  | #BorderRightColor(value) => ("borderRightColor", CssDeclarationConstructor.BoxValue(value))
  | #BorderBottomColor(value) => ("borderBottomColor", CssDeclarationConstructor.BoxValue(value))
  | #BorderLeftColor(value) => ("borderLeftColor", CssDeclarationConstructor.BoxValue(value))
  | #Background(value) => ("background", CssDeclarationConstructor.BoxValue(value))
  | #BackgroundAttachment(value) => ("backgroundAttachment", CssDeclarationConstructor.BoxValue(value))
  | #BackgroundColor(value) => ("backgroundColor", CssDeclarationConstructor.BoxValue(value))
  | #BackgroundImage(value) => ("backgroundImage", CssDeclarationConstructor.BoxValue(value)) 
  | #BackgroundPosition(value) => ("backgroundPosition", CssDeclarationConstructor.BoxValue(value))
  | #BackgroundStyle(value) => ("backgroundStyle", CssDeclarationConstructor.BoxValue(value))
  | #Margin(value) => ("margin", CssDeclarationConstructor.BoxValue(value))
  | #MarginTop(value) => ("marginTop", CssDeclarationConstructor.BoxValue(value))
  | #MarginRight(value) => ("marginRight", CssDeclarationConstructor.BoxValue(value))
  | #MarginBottom(value) => ("marginBottom", CssDeclarationConstructor.BoxValue(value))
  | #MarginLeft(value) => ("marginLeft", CssDeclarationConstructor.BoxValue(value))
  | #Padding(value) => ("padding", CssDeclarationConstructor.BoxValue(value))
  | #PaddingTop(value) => ("paddingTop", CssDeclarationConstructor.BoxValue(value))
  | #PaddingBottom(value) => ("paddingBottom", CssDeclarationConstructor.BoxValue(value))
  | #PaddingRight(value) => ("paddingRight", CssDeclarationConstructor.BoxValue(value))
  | #PaddingLeft(value) => ("paddingLeft", CssDeclarationConstructor.BoxValue(value))
  | #Color(value) => ("color", CssDeclarationConstructor.BoxValue(value))
  | #Clear(value) => ("clear", CssDeclarationConstructor.BoxValue(value))
  | #Cursor(value) => ("cursor", CssDeclarationConstructor.BoxValue(value))
  | #FontWeight(value) => ("fontWeight", CssDeclarationConstructor.BoxValue(value))
  | #FontFamily(value) => ("fontFamily", CssDeclarationConstructor.BoxValue(value))
  };
};