// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var CssDeclaration$Ress = require("./CssDeclaration.js");
var CssDeclarationFn$Ress = require("./CssDeclarationFn.js");

function Make(Type) {
  var make = function (v) {
    var v$1 = v.VAL;
    var variant = v$1.NAME;
    if (variant === "BorderWidth" || variant === "BorderColor" || variant === "BorderRightStyle" || variant === "PaddingTop" || variant === "FontWeight" || variant === "BackgroundStyle" || variant === "BorderTop" || variant === "BackgroundPosition" || variant === "BorderBottomStyle" || variant === "Padding" || variant === "Background" || variant === "Border" || variant === "MarginRight" || variant === "PaddingBottom" || variant === "FontFamily" || variant === "MarginTop" || variant === "BorderBottom" || variant === "BorderLeftWidth" || variant === "BorderLeftColor" || variant === "MarginBottom" || variant === "Property" || variant === "BorderTopStyle" || variant === "MarginLeft" || variant === "BorderRightWidth" || variant === "BorderRightColor" || variant === "BorderLeft" || variant === "BorderStyle" || variant === "Cursor" || variant === "Margin" || variant === "BackgroundColor" || variant === "PaddingLeft" || variant === "BorderBottomWidth" || variant === "BorderBottomColor" || variant === "PaddingRight" || variant === "BackgroundImage" || variant === "Color" || variant === "Clear" || variant === "BackgroundAttachment" || variant === "BorderRight" || variant === "BorderTopWidth" || variant === "BorderTopColor" || variant === "BorderLeftStyle") {
      var match = CssDeclaration$Ress.make(v$1);
      var makeImportant = (function (value) {                
                if (Array.isArray(value)) {
                  return [...value.slice(), '!important'];
                }

                return [[value], '!important'];
              });
      var value = makeImportant(match[1]);
      return [
              match[0],
              value
            ];
    }
    var match$1 = CssDeclarationFn$Ress.make(v$1);
    var makeImportant$1 = (function (valueFn) {
                return function (data) {
                  let value = valueFn(data);
                  
                  if (Array.isArray(value)) {
                    return [...value.slice(), '!important'];
                  }

                  return [[value], '!important'];
                }
              });
    var valueFn = makeImportant$1(match$1[1]);
    return [
            match$1[0],
            valueFn
          ];
  };
  return {
          make: make
        };
}

exports.Make = Make;
/* No side effect */
