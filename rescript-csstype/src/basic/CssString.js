// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';


function $$global(v) {
  if (v === "revert") {
    return "revert";
  } else if (v === "unset") {
    return "unset";
  } else if (v === "inherit") {
    return "inherit";
  } else {
    return "initial";
  }
}

function str(v) {
  return "\"" + v.VAL + "\"";
}

function num(v) {
  return String(v.VAL);
}

function $$int(v) {
  return String(v.VAL);
}

function pct(v) {
  return String(v) + "%";
}

function percentage(v) {
  return String(v.VAL) + "%";
}

function ratio(v) {
  var match = v.VAL;
  return String(match[0]) + "/" + String(match[1]);
}

function fr(v) {
  return String(v) + "fr";
}

function flexUnit(v) {
  return String(v.VAL) + "fr";
}

function ch(l) {
  return String(l) + "ch";
}

function em(l) {
  return String(l) + "em";
}

function ex(l) {
  return String(l) + "ex";
}

function rem(l) {
  return String(l) + "rem";
}

function vh(l) {
  return String(l) + "vh";
}

function vw(l) {
  return String(l) + "vw";
}

function vmin(l) {
  return String(l) + "vmin";
}

function vmax(l) {
  return String(l) + "vmax";
}

function px(l) {
  return String(l) + "px";
}

function cm(l) {
  return String(l) + "cm";
}

function mm(l) {
  return String(l) + "mm";
}

function inch(l) {
  return String(l) + "in";
}

function pc(l) {
  return String(l) + "pc";
}

function pt(l) {
  return String(l) + "pt";
}

function length(v) {
  var variant = v.NAME;
  if (variant === "vmax") {
    return String(v.VAL) + "vmax";
  } else if (variant === "vmin") {
    return String(v.VAL) + "vmin";
  } else if (variant === "ch") {
    return String(v.VAL) + "ch";
  } else if (variant === "cm") {
    return String(v.VAL) + "cm";
  } else if (variant === "em") {
    return String(v.VAL) + "em";
  } else if (variant === "ex") {
    return String(v.VAL) + "ex";
  } else if (variant === "mm") {
    return String(v.VAL) + "mm";
  } else if (variant === "pc") {
    return String(v.VAL) + "pc";
  } else if (variant === "pt") {
    return String(v.VAL) + "pt";
  } else if (variant === "px") {
    return String(v.VAL) + "px";
  } else if (variant === "vh") {
    return String(v.VAL) + "vh";
  } else if (variant === "vw") {
    return String(v.VAL) + "vw";
  } else if (variant === "rem") {
    return String(v.VAL) + "rem";
  } else {
    return String(v.VAL) + "in";
  }
}

function deg(v) {
  return String(v) + "deg";
}

function grad(v) {
  return String(v) + "grad";
}

function rad(v) {
  return String(v) + "rad";
}

function turn(v) {
  return String(v) + "turn";
}

function angle(v) {
  var variant = v.NAME;
  if (variant === "turn") {
    return String(v.VAL) + "turn";
  } else if (variant === "deg") {
    return String(v.VAL) + "deg";
  } else if (variant === "rad") {
    return String(v.VAL) + "rad";
  } else {
    return String(v.VAL) + "grad";
  }
}

function s(v) {
  return String(v) + "s";
}

function ms(v) {
  return String(v) + "ms";
}

function time(v) {
  if (v.NAME === "ms") {
    return String(v.VAL) + "ms";
  } else {
    return String(v.VAL) + "s";
  }
}

function hz(v) {
  return String(v) + "Hz";
}

function kHz(v) {
  return String(v) + "kHz";
}

function frequency(v) {
  if (v.NAME === "kHz") {
    return String(v.VAL) + "kHz";
  } else {
    return String(v.VAL) + "Hz";
  }
}

function dpi(v) {
  return String(v) + "dpi";
}

function dpcm(v) {
  return String(v) + "dpcm";
}

function dppx(v) {
  return String(v) + "dppx";
}

function x(v) {
  return String(v) + "x";
}

function resolution(v) {
  var variant = v.NAME;
  if (variant === "dppx") {
    return String(v.VAL) + "dppx";
  } else if (variant === "x") {
    return String(v.VAL) + "x";
  } else if (variant === "dpi") {
    return String(v.VAL) + "dpi";
  } else {
    return String(v.VAL) + "dpcm";
  }
}

function length_percentage(v) {
  if (v.NAME === "Pct") {
    return percentage(v);
  } else {
    return length(v);
  }
}

function frequency_percentage(v) {
  if (v.NAME === "Pct") {
    return percentage(v);
  } else {
    return frequency(v);
  }
}

function angle_percentage(v) {
  if (v.NAME === "Pct") {
    return percentage(v);
  } else {
    return angle(v);
  }
}

function time_percentage(v) {
  if (v.NAME === "Pct") {
    return percentage(v);
  } else {
    return time(v);
  }
}

function lineWidth(v) {
  if (typeof v === "object") {
    return length(v);
  } else if (v === "medium") {
    return "medium";
  } else if (v === "thick") {
    return "thick";
  } else {
    return "thin";
  }
}

function lineWidth_global(v) {
  if (typeof v === "object" || v === "thick" || v === "medium" || v === "thin") {
    return lineWidth(v);
  } else {
    return $$global(v);
  }
}

function lineStyle(v) {
  if (v === "hidden") {
    return "hidden";
  } else if (v === "ridge") {
    return "ridge";
  } else if (v === "solid") {
    return "solid";
  } else if (v === "outset") {
    return "outset";
  } else if (v === "groove") {
    return "groove";
  } else if (v === "dashed") {
    return "dashed";
  } else if (v === "dotted") {
    return "dotted";
  } else if (v === "double") {
    return "double";
  } else if (v === "inset") {
    return "inset";
  } else {
    return "none";
  }
}

function lineStyle_global(v) {
  if (v === "inherit" || v === "unset" || v === "revert" || v === "initial") {
    return $$global(v);
  } else {
    return lineStyle(v);
  }
}

function transformOrigin(v) {
  var xToString = function (x) {
    if (typeof x === "object") {
      return length_percentage(x);
    } else if (x === "right") {
      return "right";
    } else if (x === "center") {
      return "center";
    } else {
      return "left";
    }
  };
  var yToString = function (y) {
    if (typeof y === "object") {
      return length_percentage(y);
    } else if (y === "top") {
      return "top";
    } else if (y === "center") {
      return "center";
    } else {
      return "bottom";
    }
  };
  if (typeof v !== "object") {
    if (v === "bottom") {
      return "bottom";
    } else if (v === "right") {
      return "right";
    } else if (v === "top") {
      return "top";
    } else if (v === "center") {
      return "center";
    } else {
      return "left";
    }
  }
  var variant = v.NAME;
  if (variant === "TransformOrigin2") {
    var match = v.VAL;
    return xToString(match[0]) + " " + yToString(match[1]);
  }
  if (variant !== "TransformOrigin3") {
    return length_percentage(v);
  }
  var match$1 = v.VAL;
  return xToString(match$1[0]) + " " + yToString(match$1[1]) + " " + length(match$1[2]);
}

function hue(v) {
  var variant = v.NAME;
  if (variant === "Int" || variant === "Num") {
    return String(v.VAL);
  } else {
    return angle(v);
  }
}

function alpha(v) {
  if (v.NAME === "Pct") {
    return percentage(v);
  } else {
    return String(v.VAL);
  }
}

function rgbParam(v) {
  var variant = v.NAME;
  if (variant === "Num" || variant !== "Pct") {
    return String(v.VAL);
  } else {
    return percentage(v);
  }
}

function hsl(v1, v2, v3) {
  return "hsl(" + hue(v1) + ", " + percentage(v2) + ", " + percentage(v3) + ")";
}

function hsla(v1, v2, v3, v4) {
  return "hsla(" + hue(v1) + ", " + percentage(v2) + ", " + percentage(v3) + ", " + alpha(v4) + ")";
}

function rgb(v1, v2, v3) {
  return "rgb(" + rgbParam(v1) + ", " + rgbParam(v2) + ", " + rgbParam(v3) + ")";
}

function rgba(v1, v2, v3, v4) {
  return "rgba(" + rgbParam(v1) + ", " + rgbParam(v2) + ", " + rgbParam(v3) + ", " + alpha(v4) + ")";
}

function hexColor(v) {
  return "#" + v;
}

function colorKeyword(v) {
  if (v === "aqua") {
    return "aqua";
  } else if (v === "dimgray") {
    return "dimgray";
  } else if (v === "dimgrey") {
    return "dimgrey";
  } else if (v === "blue") {
    return "blue";
  } else if (v === "cyan") {
    return "cyan";
  } else if (v === "mediumaquamarine") {
    return "mediumaquamarine";
  } else if (v === "mediumpurple") {
    return "mediumpurple";
  } else if (v === "ivory") {
    return "ivory";
  } else if (v === "whitesmoke") {
    return "whitesmoke";
  } else if (v === "gold") {
    return "gold";
  } else if (v === "gray") {
    return "gray";
  } else if (v === "grey") {
    return "grey";
  } else if (v === "orange") {
    return "orange";
  } else if (v === "orchid") {
    return "orchid";
  } else if (v === "lime") {
    return "lime";
  } else if (v === "lavenderblush") {
    return "lavenderblush";
  } else if (v === "navy") {
    return "navy";
  } else if (v === "wheat") {
    return "wheat";
  } else if (v === "white") {
    return "white";
  } else if (v === "peru") {
    return "peru";
  } else if (v === "pink") {
    return "pink";
  } else if (v === "plum") {
    return "plum";
  } else if (v === "coral") {
    return "coral";
  } else if (v === "mediumblue") {
    return "mediumblue";
  } else if (v === "darkseagreen") {
    return "darkseagreen";
  } else if (v === "palegoldenrod") {
    return "palegoldenrod";
  } else if (v === "snow") {
    return "snow";
  } else if (v === "lightsalmon") {
    return "lightsalmon";
  } else if (v === "teal") {
    return "teal";
  } else if (v === "mistyrose") {
    return "mistyrose";
  } else if (v === "mediumturquoise") {
    return "mediumturquoise";
  } else if (v === "lightblue") {
    return "lightblue";
  } else if (v === "lightcyan") {
    return "lightcyan";
  } else if (v === "yellow") {
    return "yellow";
  } else if (v === "darkviolet") {
    return "darkviolet";
  } else if (v === "mintcream") {
    return "mintcream";
  } else if (v === "lightgray") {
    return "lightgray";
  } else if (v === "lightgrey") {
    return "lightgrey";
  } else if (v === "mediumspringgreen") {
    return "mediumspringgreen";
  } else if (v === "deepskyblue") {
    return "deepskyblue";
  } else if (v === "lightpink") {
    return "lightpink";
  } else if (v === "lightgoldenrodyellow") {
    return "lightgoldenrodyellow";
  } else if (v === "darkslateblue") {
    return "darkslateblue";
  } else if (v === "blanchedalmond") {
    return "blanchedalmond";
  } else if (v === "hotpink") {
    return "hotpink";
  } else if (v === "antiquewhite") {
    return "antiquewhite";
  } else if (v === "cornsilk") {
    return "cornsilk";
  } else if (v === "peachpuff") {
    return "peachpuff";
  } else if (v === "darkslategray") {
    return "darkslategray";
  } else if (v === "darkslategrey") {
    return "darkslategrey";
  } else if (v === "seashell") {
    return "seashell";
  } else if (v === "papayawhip") {
    return "papayawhip";
  } else if (v === "khaki") {
    return "khaki";
  } else if (v === "lemonchiffon") {
    return "lemonchiffon";
  } else if (v === "forestgreen") {
    return "forestgreen";
  } else if (v === "skyblue") {
    return "skyblue";
  } else if (v === "oranngered") {
    return "orangered";
  } else if (v === "crimson") {
    return "crimson";
  } else if (v === "steelblue") {
    return "steelblue";
  } else if (v === "deeppink") {
    return "deeppink";
  } else if (v === "cadetblue") {
    return "cadetblue";
  } else if (v === "midnightblue") {
    return "midnightblue";
  } else if (v === "violet") {
    return "violet";
  } else if (v === "dodgerblue") {
    return "dodgerblue";
  } else if (v === "lightseagreen") {
    return "lightseagreen";
  } else if (v === "slateblue") {
    return "slateblue";
  } else if (v === "bisque") {
    return "bisque";
  } else if (v === "purple") {
    return "purple";
  } else if (v === "darkred") {
    return "darkred";
  } else if (v === "slategray") {
    return "slategray";
  } else if (v === "slategrey") {
    return "slategrey";
  } else if (v === "greenyellow") {
    return "greenyellow";
  } else if (v === "linen") {
    return "linen";
  } else if (v === "indianred") {
    return "indianred";
  } else if (v === "lightskyblue") {
    return "lightskyblue";
  } else if (v === "darkgreen") {
    return "darkgreen";
  } else if (v === "seagreen") {
    return "seagreen";
  } else if (v === "palegreen") {
    return "palegreen";
  } else if (v === "darkturquoise") {
    return "darkturquoise";
  } else if (v === "lightyellow") {
    return "lightyellow";
  } else if (v === "red") {
    return "red";
  } else if (v === "tan") {
    return "tan";
  } else if (v === "darksalmon") {
    return "darksalmon";
  } else if (v === "lavender") {
    return "lavender";
  } else if (v === "rosybrown") {
    return "rosybrown";
  } else if (v === "palevioletred") {
    return "palevioletred";
  } else if (v === "navajowhite") {
    return "navajowhite";
  } else if (v === "chartreuse") {
    return "chartreuse";
  } else if (v === "lightgreen") {
    return "lightgreen";
  } else if (v === "darkblue") {
    return "darkblue";
  } else if (v === "darkcyan") {
    return "darkcyan";
  } else if (v === "gainsboro") {
    return "gainsboro";
  } else if (v === "darkgoldenrod") {
    return "darkgoldenrod";
  } else if (v === "darkgray") {
    return "darkgray";
  } else if (v === "magenta") {
    return "magenta";
  } else if (v === "springgreen") {
    return "springgreen";
  } else if (v === "currentColor") {
    return "currentColor";
  } else if (v === "burlywood") {
    return "burlywood";
  } else if (v === "oldlace") {
    return "oldlace";
  } else if (v === "tomato") {
    return "tomato";
  } else if (v === "blueviolet") {
    return "blueviolet";
  } else if (v === "lawngreen") {
    return "lawngreen";
  } else if (v === "turquoise") {
    return "turquoise";
  } else if (v === "indigo") {
    return "indigo";
  } else if (v === "lightsteelblue") {
    return "lightsteelblue";
  } else if (v === "mediumvioletred") {
    return "mediumvioletred";
  } else if (v === "rebeccapurple") {
    return "rebeccapurple";
  } else if (v === "mediumorchid") {
    return "mediumorchid";
  } else if (v === "darkolivegreen") {
    return "darkolivegreen";
  } else if (v === "aquamarine") {
    return "aquamarine";
  } else if (v === "darkmagenta") {
    return "darkmagenta";
  } else if (v === "green") {
    return "green";
  } else if (v === "aliceblue") {
    return "aliceblue";
  } else if (v === "yellowgreen") {
    return "yellowgreen";
  } else if (v === "salmon") {
    return "salmon";
  } else if (v === "royalblue") {
    return "royalblue";
  } else if (v === "chocolate") {
    return "chocolate";
  } else if (v === "fuchsia") {
    return "fuchsia";
  } else if (v === "lightslategray") {
    return "lightslategray";
  } else if (v === "lightslategrey") {
    return "lightslategrey";
  } else if (v === "floralwhite") {
    return "floralwhite";
  } else if (v === "firebrick") {
    return "firebrick";
  } else if (v === "mediumseagreen") {
    return "mediumseagreen";
  } else if (v === "transparent") {
    return "transparent";
  } else if (v === "goldenrod") {
    return "goldenrod";
  } else if (v === "limegreen") {
    return "limegreen";
  } else if (v === "saddlebrown") {
    return "saddlebrown";
  } else if (v === "mediumslateblue") {
    return "mediumslateblue";
  } else if (v === "darkorange") {
    return "darkorange";
  } else if (v === "azure") {
    return "azure";
  } else if (v === "darkorchid") {
    return "darkorchid";
  } else if (v === "thistle") {
    return "thistle";
  } else if (v === "beige") {
    return "beique";
  } else if (v === "olive") {
    return "olive";
  } else if (v === "cornflowerblue") {
    return "cornflowerblue";
  } else if (v === "powderblue") {
    return "powderblue";
  } else if (v === "sienna") {
    return "sienna";
  } else if (v === "black") {
    return "black";
  } else if (v === "ghostwhite") {
    return "ghostwhite";
  } else if (v === "honeydew") {
    return "honeydew";
  } else if (v === "silver") {
    return "silver";
  } else if (v === "lightcoral") {
    return "lightcoral";
  } else if (v === "moccasin") {
    return "moccasin";
  } else if (v === "brown") {
    return "brown";
  } else if (v === "maroon") {
    return "maroon";
  } else if (v === "sandybrown") {
    return "sandybrown";
  } else if (v === "paleturquoise") {
    return "paleturquoise";
  } else if (v === "olivedrab") {
    return "olivedrab";
  } else {
    return "darkkhaki";
  }
}

function color(v) {
  if (typeof v !== "object") {
    return colorKeyword(v);
  }
  var variant = v.NAME;
  if (variant === "Hsl") {
    var match = v.VAL;
    return hsl(match[0], match[1], match[2]);
  }
  if (variant === "Rgb") {
    var match$1 = v.VAL;
    return rgb(match$1[0], match$1[1], match$1[2]);
  }
  if (variant === "Hsla") {
    var match$2 = v.VAL;
    return hsla(match$2[0], match$2[1], match$2[2], match$2[3]);
  }
  if (variant !== "Rgba") {
    return "#" + v.VAL;
  }
  var match$3 = v.VAL;
  return rgba(match$3[0], match$3[1], match$3[2], match$3[3]);
}

function color_global(v) {
  if (typeof v === "object" || !(v === "inherit" || v === "unset" || v === "revert" || v === "initial")) {
    return color(v);
  } else {
    return $$global(v);
  }
}

function bgSize(v) {
  var autoOrLength = function (v) {
    if (typeof v === "object") {
      return length_percentage(v);
    } else {
      return "auto";
    }
  };
  if (typeof v !== "object") {
    if (v === "cover") {
      return "cover";
    } else if (v === "contain") {
      return "contain";
    } else {
      return "auto";
    }
  }
  if (v.NAME !== "BgSize2") {
    return length_percentage(v);
  }
  var match = v.VAL;
  return autoOrLength(match[0]) + " " + autoOrLength(match[1]);
}

function position1(v) {
  if (typeof v === "object") {
    return length_percentage(v);
  } else if (v === "bottom") {
    return "bottom";
  } else if (v === "right") {
    return "right";
  } else if (v === "top") {
    return "top";
  } else if (v === "center") {
    return "center";
  } else {
    return "left";
  }
}

function position(v) {
  if (typeof v !== "object") {
    return position1(v);
  }
  var variant = v.NAME;
  if (variant === "Position2") {
    var match = v.VAL;
    var v2 = match[1];
    var v1 = match[0];
    var v1$1 = typeof v1 === "object" ? length_percentage(v1) : (
        v1 === "right" ? "right" : (
            v1 === "center" ? "center" : "left"
          )
      );
    var v2$1 = typeof v2 === "object" ? length_percentage(v2) : (
        v2 === "top" ? "top" : (
            v2 === "center" ? "center" : "bottom"
          )
      );
    return v1$1 + " " + v2$1;
  } else if (variant === "Position3") {
    var match$1 = v.VAL;
    var v3 = match$1[2];
    var v2$2 = match$1[1];
    var v1$2 = match$1[0];
    var v1$3 = v1$2 === "right" ? "right" : (
        v1$2 === "center" ? "center" : "left"
      );
    var v2$3 = typeof v2$2 === "object" ? length_percentage(v2$2) : (
        v2$2 === "top" ? "top" : "bottom"
      );
    var v3$1 = typeof v3 === "object" ? length_percentage(v3) : (
        v3 === "top" ? "top" : (
            v3 === "center" ? "center" : "bottom"
          )
      );
    return v1$3 + " " + v2$3 + " " + v3$1;
  } else if (variant === "Position4") {
    var match$2 = v.VAL;
    var v1$4 = match$2[0] === "right" ? "right" : "left";
    var v3$2 = match$2[2] === "top" ? "top" : "bottom";
    return v1$4 + " " + length_percentage(match$2[1]) + " " + v3$2 + " " + length_percentage(match$2[3]);
  } else {
    return position1(v);
  }
}

function position_global(v) {
  if (typeof v === "object" || !(v === "inherit" || v === "unset" || v === "revert" || v === "initial")) {
    return position(v);
  } else {
    return $$global(v);
  }
}

function gradientLineStartingPoint(v) {
  if (v === "toBottomRight") {
    return "to bottom right";
  } else if (v === "toLeft") {
    return "to left";
  } else if (v === "toBottom") {
    return "to bottom";
  } else if (v === "toTop") {
    return "to top";
  } else if (v === "toTopLeft") {
    return "to top left";
  } else if (v === "toTopRight") {
    return "to top right";
  } else if (v === "toRight") {
    return "to right";
  } else {
    return "to bottom left";
  }
}

function gradientLineAngle(v) {
  if (typeof v === "object") {
    return angle(v);
  } else {
    return gradientLineStartingPoint(v);
  }
}

function linearColorStop(v) {
  if (typeof v !== "object") {
    return color(v);
  }
  var variant = v.NAME;
  if (variant === "LinearColorStop2") {
    var match = v.VAL;
    return color(match[0]) + " " + length_percentage(match[1]);
  }
  if (variant !== "LinearColorStop3") {
    if (variant === "Rgba" || variant === "Hsla" || variant === "Rgb" || variant === "Hsl" || variant === "HexColor") {
      return color(v);
    } else {
      return length_percentage(v);
    }
  }
  var match$1 = v.VAL;
  return color(match$1[0]) + " " + length_percentage(match$1[1]) + " " + length_percentage(match$1[2]);
}

function linearColorStop2(c1, c2) {
  return linearColorStop(c1) + ", " + linearColorStop(c2);
}

function linearColorStop3(c1, c2, c3) {
  return linearColorStop(c1) + ", " + linearColorStop(c2) + ", " + linearColorStop(c3);
}

function linearColorStop4(c1, c2, c3, c4) {
  return linearColorStop(c1) + ", " + linearColorStop(c2) + ", " + linearColorStop(c3) + ", " + linearColorStop(c4);
}

function linearGradient_(linearColorStop, angle) {
  if (angle !== undefined) {
    return gradientLineAngle(angle) + ", " + linearColorStop;
  } else {
    return linearColorStop;
  }
}

function linearGradient(v) {
  var variant = v.NAME;
  var arg;
  if (variant === "LinearGradient2") {
    var match = v.VAL;
    arg = linearGradient_(linearColorStop2(match[1], match[2]), match[0]);
  } else if (variant === "LinearGradient3") {
    var match$1 = v.VAL;
    arg = linearGradient_(linearColorStop3(match$1[1], match$1[2], match$1[3]), match$1[0]);
  } else if (variant === "LinearGradient4") {
    var match$2 = v.VAL;
    arg = linearGradient_(linearColorStop4(match$2[1], match$2[2], match$2[3], match$2[4]), match$2[0]);
  } else {
    var match$3 = v.VAL;
    arg = linearGradient_(linearColorStop(match$3[1]), match$3[0]);
  }
  return "linear-gradient(" + arg + ")";
}

function repeatingLinearGradient(v) {
  var variant = v.NAME;
  var arg;
  if (variant === "RepeatingLinearGradient2") {
    var match = v.VAL;
    arg = linearGradient_(linearColorStop2(match[1], match[2]), match[0]);
  } else if (variant === "RepeatingLinearGradient3") {
    var match$1 = v.VAL;
    arg = linearGradient_(linearColorStop3(match$1[1], match$1[2], match$1[3]), match$1[0]);
  } else if (variant === "RepeatingLinearGradient4") {
    var match$2 = v.VAL;
    arg = linearGradient_(linearColorStop4(match$2[1], match$2[2], match$2[3], match$2[4]), match$2[0]);
  } else {
    var match$3 = v.VAL;
    arg = linearGradient_(linearColorStop(match$3[1]), match$3[0]);
  }
  return "repeating-linear-gradient(" + arg + ")";
}

function radialGradientSize(v) {
  if (typeof v !== "object") {
    if (v === "closestSide") {
      return "closest-side";
    } else if (v === "farthestCorner") {
      return "farthes-corner";
    } else if (v === "closestCorner") {
      return "closest-corner";
    } else {
      return "farthest-side";
    }
  }
  if (v.NAME !== "Ellipse") {
    return length(v);
  }
  var match = v.VAL;
  return length_percentage(match[0]) + " " + length_percentage(match[1]);
}

function radialGradientPosition(v) {
  if (typeof v !== "object") {
    return position(v);
  }
  var variant = v.NAME;
  if (variant === "TransformOrigin3" || variant === "TransformOrigin2") {
    return transformOrigin(v);
  } else {
    return position(v);
  }
}

function radialGradientEndingShape(position, endingShape, size) {
  var endingShape$1;
  if (endingShape !== undefined) {
    if (size !== undefined) {
      if (endingShape === "ellipse") {
        if (typeof size === "object") {
          var variant = size.NAME;
          endingShape$1 = variant === "rem" || variant === "vw" || variant === "vh" || variant === "px" || variant === "pt" || variant === "pc" || variant === "mm" || variant === "ex" || variant === "em" || variant === "cm" || variant === "ch" || variant === "vmin" || variant === "vmax" || variant === "inch" ? "ellipse" : "ellipse " + radialGradientSize(size);
        } else {
          endingShape$1 = "ellipse " + radialGradientSize(size);
        }
      } else {
        endingShape$1 = typeof size === "object" ? (
            size.NAME === "Ellipse" ? "circle" : "circle " + radialGradientSize(size)
          ) : "circle " + radialGradientSize(size);
      }
    } else {
      endingShape$1 = endingShape;
    }
  } else if (size !== undefined) {
    if (typeof size === "object") {
      var variant$1 = size.NAME;
      endingShape$1 = variant$1 === "rem" || variant$1 === "vw" || variant$1 === "vh" || variant$1 === "px" || variant$1 === "pt" || variant$1 === "pc" || variant$1 === "mm" || variant$1 === "ex" || variant$1 === "em" || variant$1 === "cm" || variant$1 === "ch" || variant$1 === "vmin" || variant$1 === "vmax" || variant$1 === "inch" ? undefined : radialGradientSize(size);
    } else {
      endingShape$1 = radialGradientSize(size);
    }
  } else {
    endingShape$1 = undefined;
  }
  if (endingShape$1 !== undefined) {
    if (position !== undefined) {
      return endingShape$1 + " at " + radialGradientPosition(position);
    } else {
      return endingShape$1;
    }
  } else if (position !== undefined) {
    return "at " + radialGradientPosition(position);
  } else {
    return ;
  }
}

function radialGradient_(linearColorStop, position, endingShape, size) {
  var endingShape$1 = radialGradientEndingShape(position, endingShape, size);
  if (endingShape$1 !== undefined) {
    return endingShape$1 + ", " + linearColorStop;
  } else {
    return linearColorStop;
  }
}

function radialGradient(v) {
  var variant = v.NAME;
  var arg;
  if (variant === "RadialGradient3") {
    var match = v.VAL;
    arg = radialGradient_(linearColorStop3(match[3], match[4], match[5]), match[0], match[1], match[2]);
  } else if (variant === "RadialGradient4") {
    var match$1 = v.VAL;
    arg = radialGradient_(linearColorStop4(match$1[3], match$1[4], match$1[5], match$1[6]), match$1[0], match$1[1], match$1[2]);
  } else if (variant === "RadialGradient") {
    var match$2 = v.VAL;
    arg = radialGradient_(linearColorStop(match$2[3]), match$2[0], match$2[1], match$2[2]);
  } else {
    var match$3 = v.VAL;
    arg = radialGradient_(linearColorStop2(match$3[3], match$3[4]), match$3[0], match$3[1], match$3[2]);
  }
  return "radial-gradient(" + arg + ")";
}

function repeatingRadialGradient(v) {
  var variant = v.NAME;
  var arg;
  if (variant === "RepeatingRadialGradient2") {
    var match = v.VAL;
    arg = radialGradient_(linearColorStop2(match[3], match[4]), match[0], match[1], match[2]);
  } else if (variant === "RepeatingRadialGradient3") {
    var match$1 = v.VAL;
    arg = radialGradient_(linearColorStop3(match$1[3], match$1[4], match$1[5]), match$1[0], match$1[1], match$1[2]);
  } else if (variant === "RepeatingRadialGradient4") {
    var match$2 = v.VAL;
    arg = radialGradient_(linearColorStop4(match$2[3], match$2[4], match$2[5], match$2[6]), match$2[0], match$2[1], match$2[2]);
  } else {
    var match$3 = v.VAL;
    arg = radialGradient_(linearColorStop(match$3[3]), match$3[0], match$3[1], match$3[2]);
  }
  return "repeating-radial-gradient(" + arg + ")";
}

function conicGradientAngle(angle, pos) {
  if (angle !== undefined) {
    if (pos !== undefined) {
      return "from " + gradientLineAngle(angle) + " at " + position(pos);
    } else {
      return "from " + gradientLineAngle(angle);
    }
  } else if (pos !== undefined) {
    return "at " + position(pos);
  } else {
    return ;
  }
}

function conicGradient_(linearColorStop, angle, pos) {
  var angle$1 = conicGradientAngle(angle, pos);
  if (angle$1 !== undefined) {
    return angle$1 + ", " + linearColorStop;
  } else {
    return linearColorStop;
  }
}

function conicGradient(v) {
  var variant = v.NAME;
  var arg;
  if (variant === "ConicGradient2") {
    var match = v.VAL;
    arg = conicGradient_(linearColorStop2(match[2], match[3]), match[0], match[1]);
  } else if (variant === "ConicGradient3") {
    var match$1 = v.VAL;
    arg = conicGradient_(linearColorStop3(match$1[2], match$1[3], match$1[4]), match$1[0], match$1[1]);
  } else if (variant === "ConicGradient4") {
    var match$2 = v.VAL;
    arg = conicGradient_(linearColorStop4(match$2[2], match$2[3], match$2[4], match$2[5]), match$2[0], match$2[1]);
  } else {
    var match$3 = v.VAL;
    arg = conicGradient_(linearColorStop(match$3[2]), match$3[0], match$3[1]);
  }
  return "conic-gradient(" + arg + ")";
}

function repeatingConicGradient(v) {
  var variant = v.NAME;
  var arg;
  if (variant === "RepeatingConicGradient2") {
    var match = v.VAL;
    arg = conicGradient_(linearColorStop2(match[2], match[3]), match[0], match[1]);
  } else if (variant === "RepeatingConicGradient3") {
    var match$1 = v.VAL;
    arg = conicGradient_(linearColorStop3(match$1[2], match$1[3], match$1[4]), match$1[0], match$1[1]);
  } else if (variant === "RepeatingConicGradient4") {
    var match$2 = v.VAL;
    arg = conicGradient_(linearColorStop4(match$2[2], match$2[3], match$2[4], match$2[5]), match$2[0], match$2[1]);
  } else {
    var match$3 = v.VAL;
    arg = conicGradient_(linearColorStop(match$3[2]), match$3[0], match$3[1]);
  }
  return "repeating-conic-gradient(" + arg + ")";
}

function gradient(v) {
  var variant = v.NAME;
  if (variant === "RepeatingRadialGradient4" || variant === "RepeatingRadialGradient3" || variant === "RepeatingRadialGradient2" || variant === "RepeatingRadialGradient") {
    return repeatingRadialGradient(v);
  } else if (variant === "RepeatingLinearGradient4" || variant === "RepeatingLinearGradient3" || variant === "RepeatingLinearGradient2" || variant === "RepeatingLinearGradient") {
    return repeatingLinearGradient(v);
  } else if (variant === "RadialGradient" || variant === "RadialGradient4" || variant === "RadialGradient3" || variant === "RadialGradient2") {
    return radialGradient(v);
  } else if (variant === "ConicGradient4" || variant === "ConicGradient3" || variant === "ConicGradient2" || variant === "ConicGradient") {
    return conicGradient(v);
  } else if (variant === "RepeatingConicGradient4" || variant === "RepeatingConicGradient3" || variant === "RepeatingConicGradient2" || variant === "RepeatingConicGradient") {
    return repeatingConicGradient(v);
  } else {
    return linearGradient(v);
  }
}

function imageTags(v) {
  if (v === "rtl") {
    return "rtl";
  } else {
    return "ltr";
  }
}

function url(v) {
  return "url(\"" + v.VAL + "\")";
}

function imageSrc(v) {
  if (v.NAME === "Url") {
    return url(v);
  } else {
    return "\"" + v.VAL + "\"";
  }
}

function image(v) {
  var variant = v.NAME;
  if (variant !== "Image") {
    if (variant === "Url" || variant === "Src") {
      return imageSrc(v);
    } else {
      return gradient(v);
    }
  }
  var match = v.VAL;
  var t = match[0];
  if (t !== undefined) {
    var c = match[1];
    var c$1 = match[2];
    var exit = 0;
    if (typeof c$1 === "object") {
      var variant$1 = c$1.NAME;
      if (variant$1 === "Rgba" || variant$1 === "Hsla" || variant$1 === "Rgb" || variant$1 === "Hsl" || variant$1 === "HexColor") {
        exit = 2;
      }
      
    } else if (c$1 === "olivedrab" || c$1 === "paleturquoise" || c$1 === "sandybrown" || c$1 === "maroon" || c$1 === "brown" || c$1 === "moccasin" || c$1 === "lightcoral" || c$1 === "silver" || c$1 === "honeydew" || c$1 === "ghostwhite" || c$1 === "black" || c$1 === "sienna" || c$1 === "powderblue" || c$1 === "cornflowerblue" || c$1 === "olive" || c$1 === "beige" || c$1 === "thistle" || c$1 === "darkorchid" || c$1 === "azure" || c$1 === "darkorange" || c$1 === "mediumslateblue" || c$1 === "saddlebrown" || c$1 === "limegreen" || c$1 === "goldenrod" || c$1 === "transparent" || c$1 === "mediumseagreen" || c$1 === "firebrick" || c$1 === "floralwhite" || c$1 === "lightslategrey" || c$1 === "lightslategray" || c$1 === "fuchsia" || c$1 === "chocolate" || c$1 === "royalblue" || c$1 === "salmon" || c$1 === "yellowgreen" || c$1 === "aliceblue" || c$1 === "green" || c$1 === "darkmagenta" || c$1 === "aquamarine" || c$1 === "darkolivegreen" || c$1 === "mediumorchid" || c$1 === "rebeccapurple" || c$1 === "mediumvioletred" || c$1 === "lightsteelblue" || c$1 === "indigo" || c$1 === "turquoise" || c$1 === "lawngreen" || c$1 === "blueviolet" || c$1 === "tomato" || c$1 === "oldlace" || c$1 === "burlywood" || c$1 === "currentColor" || c$1 === "springgreen" || c$1 === "magenta" || c$1 === "darkgray" || c$1 === "darkgoldenrod" || c$1 === "gainsboro" || c$1 === "darkcyan" || c$1 === "darkblue" || c$1 === "lightgreen" || c$1 === "chartreuse" || c$1 === "navajowhite" || c$1 === "palevioletred" || c$1 === "rosybrown" || c$1 === "lavender" || c$1 === "darksalmon" || c$1 === "tan" || c$1 === "red" || c$1 === "lightyellow" || c$1 === "darkturquoise" || c$1 === "palegreen" || c$1 === "seagreen" || c$1 === "darkgreen" || c$1 === "lightskyblue" || c$1 === "indianred" || c$1 === "linen" || c$1 === "greenyellow" || c$1 === "slategrey" || c$1 === "slategray" || c$1 === "darkred" || c$1 === "purple" || c$1 === "bisque" || c$1 === "slateblue" || c$1 === "lightseagreen" || c$1 === "dodgerblue" || c$1 === "violet" || c$1 === "midnightblue" || c$1 === "cadetblue" || c$1 === "deeppink" || c$1 === "steelblue" || c$1 === "crimson" || c$1 === "oranngered" || c$1 === "skyblue" || c$1 === "forestgreen" || c$1 === "lemonchiffon" || c$1 === "khaki" || c$1 === "papayawhip" || c$1 === "seashell" || c$1 === "darkslategrey" || c$1 === "darkslategray" || c$1 === "peachpuff" || c$1 === "cornsilk" || c$1 === "antiquewhite" || c$1 === "hotpink" || c$1 === "blanchedalmond" || c$1 === "darkslateblue" || c$1 === "lightgoldenrodyellow" || c$1 === "lightpink" || c$1 === "deepskyblue" || c$1 === "mediumspringgreen" || c$1 === "lightgrey" || c$1 === "lightgray" || c$1 === "mintcream" || c$1 === "darkviolet" || c$1 === "yellow" || c$1 === "lightcyan" || c$1 === "lightblue" || c$1 === "mediumturquoise" || c$1 === "mistyrose" || c$1 === "teal" || c$1 === "lightsalmon" || c$1 === "snow" || c$1 === "palegoldenrod" || c$1 === "darkseagreen" || c$1 === "mediumblue" || c$1 === "coral" || c$1 === "plum" || c$1 === "pink" || c$1 === "peru" || c$1 === "white" || c$1 === "wheat" || c$1 === "navy" || c$1 === "lavenderblush" || c$1 === "lime" || c$1 === "orchid" || c$1 === "orange" || c$1 === "grey" || c$1 === "gray" || c$1 === "gold" || c$1 === "whitesmoke" || c$1 === "ivory" || c$1 === "mediumpurple" || c$1 === "mediumaquamarine" || c$1 === "cyan" || c$1 === "blue" || c$1 === "dimgrey" || c$1 === "dimgray" || c$1 === "aqua" || c$1 === "darkkhaki") {
      exit = 2;
    }
    if (exit === 2) {
      return "image(" + imageTags(t) + " " + color(c$1) + ")";
    }
    if (c !== undefined) {
      return "image(" + imageTags(t) + " " + imageSrc(match[2]) + ", " + color(c) + ")";
    } else {
      return "image(" + imageTags(t) + " " + imageSrc(match[2]) + ")";
    }
  }
  var c$2 = match[1];
  var c$3 = match[2];
  if (typeof c$3 === "object") {
    var variant$2 = c$3.NAME;
    if (variant$2 === "Rgba" || variant$2 === "Hsla" || variant$2 === "Rgb" || variant$2 === "Hsl" || variant$2 === "HexColor") {
      return "image(" + color(c$3) + ")";
    }
    
  } else if (c$3 === "olivedrab" || c$3 === "paleturquoise" || c$3 === "sandybrown" || c$3 === "maroon" || c$3 === "brown" || c$3 === "moccasin" || c$3 === "lightcoral" || c$3 === "silver" || c$3 === "honeydew" || c$3 === "ghostwhite" || c$3 === "black" || c$3 === "sienna" || c$3 === "powderblue" || c$3 === "cornflowerblue" || c$3 === "olive" || c$3 === "beige" || c$3 === "thistle" || c$3 === "darkorchid" || c$3 === "azure" || c$3 === "darkorange" || c$3 === "mediumslateblue" || c$3 === "saddlebrown" || c$3 === "limegreen" || c$3 === "goldenrod" || c$3 === "transparent" || c$3 === "mediumseagreen" || c$3 === "firebrick" || c$3 === "floralwhite" || c$3 === "lightslategrey" || c$3 === "lightslategray" || c$3 === "fuchsia" || c$3 === "chocolate" || c$3 === "royalblue" || c$3 === "salmon" || c$3 === "yellowgreen" || c$3 === "aliceblue" || c$3 === "green" || c$3 === "darkmagenta" || c$3 === "aquamarine" || c$3 === "darkolivegreen" || c$3 === "mediumorchid" || c$3 === "rebeccapurple" || c$3 === "mediumvioletred" || c$3 === "lightsteelblue" || c$3 === "indigo" || c$3 === "turquoise" || c$3 === "lawngreen" || c$3 === "blueviolet" || c$3 === "tomato" || c$3 === "oldlace" || c$3 === "burlywood" || c$3 === "currentColor" || c$3 === "springgreen" || c$3 === "magenta" || c$3 === "darkgray" || c$3 === "darkgoldenrod" || c$3 === "gainsboro" || c$3 === "darkcyan" || c$3 === "darkblue" || c$3 === "lightgreen" || c$3 === "chartreuse" || c$3 === "navajowhite" || c$3 === "palevioletred" || c$3 === "rosybrown" || c$3 === "lavender" || c$3 === "darksalmon" || c$3 === "tan" || c$3 === "red" || c$3 === "lightyellow" || c$3 === "darkturquoise" || c$3 === "palegreen" || c$3 === "seagreen" || c$3 === "darkgreen" || c$3 === "lightskyblue" || c$3 === "indianred" || c$3 === "linen" || c$3 === "greenyellow" || c$3 === "slategrey" || c$3 === "slategray" || c$3 === "darkred" || c$3 === "purple" || c$3 === "bisque" || c$3 === "slateblue" || c$3 === "lightseagreen" || c$3 === "dodgerblue" || c$3 === "violet" || c$3 === "midnightblue" || c$3 === "cadetblue" || c$3 === "deeppink" || c$3 === "steelblue" || c$3 === "crimson" || c$3 === "oranngered" || c$3 === "skyblue" || c$3 === "forestgreen" || c$3 === "lemonchiffon" || c$3 === "khaki" || c$3 === "papayawhip" || c$3 === "seashell" || c$3 === "darkslategrey" || c$3 === "darkslategray" || c$3 === "peachpuff" || c$3 === "cornsilk" || c$3 === "antiquewhite" || c$3 === "hotpink" || c$3 === "blanchedalmond" || c$3 === "darkslateblue" || c$3 === "lightgoldenrodyellow" || c$3 === "lightpink" || c$3 === "deepskyblue" || c$3 === "mediumspringgreen" || c$3 === "lightgrey" || c$3 === "lightgray" || c$3 === "mintcream" || c$3 === "darkviolet" || c$3 === "yellow" || c$3 === "lightcyan" || c$3 === "lightblue" || c$3 === "mediumturquoise" || c$3 === "mistyrose" || c$3 === "teal" || c$3 === "lightsalmon" || c$3 === "snow" || c$3 === "palegoldenrod" || c$3 === "darkseagreen" || c$3 === "mediumblue" || c$3 === "coral" || c$3 === "plum" || c$3 === "pink" || c$3 === "peru" || c$3 === "white" || c$3 === "wheat" || c$3 === "navy" || c$3 === "lavenderblush" || c$3 === "lime" || c$3 === "orchid" || c$3 === "orange" || c$3 === "grey" || c$3 === "gray" || c$3 === "gold" || c$3 === "whitesmoke" || c$3 === "ivory" || c$3 === "mediumpurple" || c$3 === "mediumaquamarine" || c$3 === "cyan" || c$3 === "blue" || c$3 === "dimgrey" || c$3 === "dimgray" || c$3 === "aqua" || c$3 === "darkkhaki") {
    return "image(" + color(c$3) + ")";
  }
  if (c$2 !== undefined) {
    return "image(" + imageSrc(match[2]) + ", " + color(c$2) + ")";
  } else {
    return "image(" + imageSrc(match[2]) + ")";
  }
}

function bgImage(v) {
  if (typeof v === "object") {
    return image(v);
  } else {
    return "none";
  }
}

function bgImage_global(v) {
  if (typeof v === "object" || !(v === "inherit" || v === "unset" || v === "revert" || v === "initial")) {
    return bgImage(v);
  } else {
    return $$global(v);
  }
}

function repeatStyle(v) {
  if (v === "space__noRepeat") {
    return "space no-repeat";
  } else if (v === "noRepeat__repeat") {
    return "no-repeat repeat";
  } else if (v === "space__space") {
    return "space space";
  } else if (v === "noRepeat") {
    return "no-repeat";
  } else if (v === "round__round") {
    return "round round";
  } else if (v === "round") {
    return "round";
  } else if (v === "repeat__round") {
    return "repeat round";
  } else if (v === "round__space") {
    return "round space";
  } else if (v === "repeat__repeat") {
    return "repeat repeat";
  } else if (v === "repeat__noRepeat") {
    return "repeat no-repeat";
  } else if (v === "space") {
    return "space";
  } else if (v === "repeat__space") {
    return "repeat space";
  } else if (v === "repeat") {
    return "repeat";
  } else if (v === "noRepeat__round") {
    return "no-repeat round";
  } else if (v === "repeatX") {
    return "repeat-x";
  } else if (v === "repeatY") {
    return "repeat-y";
  } else if (v === "round__repeat") {
    return "round repeat";
  } else if (v === "space__repeat") {
    return "space repeat";
  } else if (v === "round__noRepeat") {
    return "round no-repeat";
  } else if (v === "noRepeat__space") {
    return "no-repeat space";
  } else if (v === "noRepeat__noRepeat") {
    return "no-repeat no-repeat";
  } else {
    return "space round";
  }
}

function repeatStyle_global(v) {
  if (v === "inherit" || v === "unset" || v === "revert" || v === "initial") {
    return $$global(v);
  } else {
    return repeatStyle(v);
  }
}

function attachment(v) {
  if (v === "local") {
    return "local";
  } else if (v === "fixed") {
    return "fixed";
  } else {
    return "scroll";
  }
}

function attachment_global(v) {
  if (v === "inherit" || v === "unset" || v === "revert" || v === "initial") {
    return $$global(v);
  } else {
    return attachment(v);
  }
}

function box(v) {
  if (v === "borderBox") {
    return "border-box";
  } else if (v === "paddingBox") {
    return "padding-box";
  } else {
    return "content-box";
  }
}

function bg(c, pos, size, repeat, att, origin, clip, imageOrColor) {
  var pos$1 = pos !== undefined ? (
      size !== undefined ? position(pos) + " / " + bgSize(size) : position(pos)
    ) : undefined;
  var bg$1 = pos$1 !== undefined ? (
      repeat !== undefined ? pos$1 + " " + repeatStyle(repeat) : pos$1
    ) : (
      repeat !== undefined ? repeatStyle(repeat) : undefined
    );
  var bg$2 = bg$1 !== undefined ? (
      att !== undefined ? bg$1 + " " + attachment(att) : bg$1
    ) : (
      att !== undefined ? attachment(att) : undefined
    );
  var box$1 = origin !== undefined ? (
      clip !== undefined ? box(origin) + " " + box(clip) : box(origin)
    ) : undefined;
  var bg$3 = bg$2 !== undefined ? (
      box$1 !== undefined ? bg$2 + " " + box$1 : bg$2
    ) : (
      box$1 !== undefined ? box$1 : undefined
    );
  var exit = 0;
  if (typeof imageOrColor === "object") {
    var variant = imageOrColor.NAME;
    exit = variant === "Rgba" || variant === "Hsla" || variant === "Rgb" || variant === "Hsl" || variant === "HexColor" ? 2 : 1;
  } else {
    exit = imageOrColor === "none" ? 1 : 2;
  }
  switch (exit) {
    case 1 :
        if (c !== undefined) {
          if (bg$3 !== undefined) {
            return color(c) + " " + bgImage(imageOrColor) + " " + bg$3;
          } else {
            return color(c) + " " + bgImage(imageOrColor);
          }
        } else if (bg$3 !== undefined) {
          return bgImage(imageOrColor) + " " + bg$3;
        } else {
          return bgImage(imageOrColor);
        }
    case 2 :
        if (bg$3 !== undefined) {
          return color(imageOrColor) + " " + bg$3;
        } else {
          return color(imageOrColor);
        }
    
  }
}

function bgLayer(v) {
  if (typeof v !== "object") {
    if (v === "none") {
      return bgImage(v);
    } else {
      return color(v);
    }
  }
  var variant = v.NAME;
  if (variant === "Rgba" || variant === "Hsla" || variant === "Rgb" || variant === "Hsl" || variant === "HexColor") {
    return color(v);
  }
  if (variant !== "BgLayer") {
    return bgImage(v);
  }
  var match = v.VAL;
  return bg(match[0], match[1], match[2], match[3], match[4], match[5], match[6], match[7]);
}

function margin(v) {
  if (typeof v === "object") {
    return length_percentage(v);
  } else {
    return "auto";
  }
}

function margin_global(v) {
  if (typeof v === "object" || !(v === "inherit" || v === "unset" || v === "revert" || v === "initial")) {
    return margin(v);
  } else {
    return $$global(v);
  }
}

var padding = length_percentage;

function padding_global(v) {
  if (typeof v === "object") {
    return length_percentage(v);
  } else {
    return $$global(v);
  }
}

function clear(v) {
  if (v === "inlineStart") {
    return "inline-start";
  } else if (v === "left") {
    return "left";
  } else if (v === "none") {
    return "none";
  } else if (v === "right") {
    return "right";
  } else if (v === "inlineEnd") {
    return "inline-end";
  } else {
    return "both";
  }
}

function clear_global(v) {
  if (v === "inherit" || v === "unset" || v === "revert" || v === "initial") {
    return $$global(v);
  } else {
    return clear(v);
  }
}

function cursorKeyword(v) {
  if (v === "cell") {
    return "cell";
  } else if (v === "copy") {
    return "copy";
  } else if (v === "swResize") {
    return "sw-resize";
  } else if (v === "grab") {
    return "grab";
  } else if (v === "help") {
    return "help";
  } else if (v === "move") {
    return "move";
  } else if (v === "none") {
    return "none";
  } else if (v === "text") {
    return "text";
  } else if (v === "rowResize") {
    return "row-resize";
  } else if (v === "wait") {
    return "wait";
  } else if (v === "pointer") {
    return "pointer";
  } else if (v === "seResize") {
    return "se-resize";
  } else if (v === "zoomOut") {
    return "zoom-out";
  } else if (v === "sResize") {
    return "s-resize";
  } else if (v === "zoomIn") {
    return "zoom-in";
  } else if (v === "grabbing") {
    return "grabbing";
  } else if (v === "nsResize") {
    return "ns-resize";
  } else if (v === "progress") {
    return "progress";
  } else if (v === "crosshair") {
    return "crosshair";
  } else if (v === "wResize") {
    return "w-resize";
  } else if (v === "noDrop") {
    return "no-drop";
  } else if (v === "allScroll") {
    return "all-scroll";
  } else if (v === "verticalText") {
    return "vertical-text";
  } else if (v === "nResize") {
    return "n-resize";
  } else if (v === "default") {
    return "default";
  } else if (v === "neswResize") {
    return "nesw-resize";
  } else if (v === "alias") {
    return "alias";
  } else if (v === "ewResize") {
    return "ew-resize";
  } else if (v === "eResize") {
    return "e-resize";
  } else if (v === "nwResize") {
    return "nw-resize";
  } else if (v === "contextMenu") {
    return "context-menu";
  } else if (v === "colResize") {
    return "color-resize";
  } else if (v === "notAllowed") {
    return "not-allowed";
  } else if (v === "neResize") {
    return "ne-resize";
  } else {
    return "auto";
  }
}

function cursorKeyword_global(v) {
  if (v === "inherit" || v === "unset" || v === "revert" || v === "initial") {
    return $$global(v);
  } else {
    return cursorKeyword(v);
  }
}

var cursorImage = url;

function fontWeight(v) {
  if (v === "bolder") {
    return "bolder";
  } else if (v === "lighter") {
    return "lighter";
  } else if (v === "normal") {
    return "normal";
  } else {
    return "bold";
  }
}

function fontWeight_global(v) {
  if (v === "inherit" || v === "unset" || v === "revert" || v === "initial") {
    return $$global(v);
  } else {
    return fontWeight(v);
  }
}

function genericFontFamilyName(v) {
  if (v === "math") {
    return "math";
  } else if (v === "cursive") {
    return "cursive";
  } else if (v === "sansSerif") {
    return "sans-serif";
  } else if (v === "monospace") {
    return "monospace";
  } else if (v === "systemUi") {
    return "system-ui";
  } else if (v === "emoji") {
    return "emoji";
  } else if (v === "serif") {
    return "serif";
  } else if (v === "fantasy") {
    return "fantasy";
  } else if (v === "uiSerif") {
    return "ui-serif";
  } else if (v === "fangsong") {
    return "fangsong";
  } else if (v === "uiRounded") {
    return "ui-rounded";
  } else if (v === "uiSansSerif") {
    return "ui-sans-serif";
  } else {
    return "ui-monospace";
  }
}

function fontFamily(v) {
  if (typeof v === "object") {
    return "\"" + v.VAL + "\"";
  } else {
    return genericFontFamilyName(v);
  }
}

function fontFamily_global(v) {
  if (typeof v === "object" || !(v === "inherit" || v === "unset" || v === "revert" || v === "initial")) {
    return fontFamily(v);
  } else {
    return $$global(v);
  }
}

function background(color, position, size, repeat, attachment, origin, clip, imageOrColor) {
  var imageOrColor$1;
  if (typeof imageOrColor === "object") {
    imageOrColor$1 = imageOrColor;
  } else {
    if (imageOrColor === "inherit" || imageOrColor === "unset" || imageOrColor === "revert" || imageOrColor === "initial") {
      return $$global(imageOrColor);
    }
    imageOrColor$1 = imageOrColor;
  }
  return bg(color, position, size, repeat, attachment, origin, clip, imageOrColor$1);
}

function background2(v1, v2) {
  return bgLayer(v1) + ", " + bgLayer(v2);
}

function background3(v1, v2, v3) {
  return bgLayer(v1) + ", " + bgLayer(v2) + ", " + bgLayer(v3);
}

function background4(v1, v2, v3, v4) {
  return bgLayer(v1) + ", " + bgLayer(v2) + ", " + bgLayer(v3) + ", " + bgLayer(v4);
}

var backgroundAttachment = attachment_global;

function backgroundAttachment2(v1, v2) {
  return attachment(v1) + ", " + attachment(v2);
}

function backgroundAttachment3(v1, v2, v3) {
  return attachment(v1) + ", " + attachment(v2) + ", " + attachment(v3);
}

function backgroundAttachment4(v1, v2, v3, v4) {
  return attachment(v1) + ", " + attachment(v2) + ", " + attachment(v3) + ", " + attachment(v4);
}

var backgroundColor = color_global;

var backgroundImage = bgImage_global;

function backgroundImage2(v1, v2) {
  return bgImage(v1) + ", " + bgImage(v2);
}

function backgroundImage3(v1, v2, v3) {
  return bgImage(v1) + ", " + bgImage(v2) + ", " + bgImage(v3);
}

function backgroundImage4(v1, v2, v3, v4) {
  return bgImage(v1) + ", " + bgImage(v2) + ", " + bgImage(v3) + ", " + bgImage(v4);
}

var backgroundPosition = position_global;

function backgroundPosition2(v1, v2) {
  return position(v1) + ", " + position(v2);
}

function backgroundPosition3(v1, v2, v3) {
  return position(v1) + ", " + position(v2) + ", " + position(v3);
}

function backgroundPosition4(v1, v2, v3, v4) {
  return position(v1) + ", " + position(v2) + ", " + position(v3) + ", " + position(v4);
}

var backgroundStyle = repeatStyle_global;

function backgroundStyle2(v1, v2) {
  return repeatStyle(v1) + ", " + repeatStyle(v2);
}

function backgroundStyle3(v1, v2, v3) {
  return repeatStyle(v1) + ", " + repeatStyle(v2) + ", " + repeatStyle(v3);
}

function backgroundStyle4(v1, v2, v3, v4) {
  return repeatStyle(v1) + ", " + repeatStyle(v2) + ", " + repeatStyle(v3) + ", " + repeatStyle(v4);
}

function border(width, color$1, style) {
  var border$1 = width !== undefined ? (
      color$1 !== undefined ? lineWidth(width) + " " + color(color$1) : lineWidth(width)
    ) : (
      color$1 !== undefined ? color(color$1) : undefined
    );
  if (style === "inherit" || style === "unset" || style === "revert" || style === "initial") {
    return $$global(style);
  } else if (border$1 !== undefined) {
    return border$1 + " " + lineStyle(style);
  } else {
    return lineStyle(style);
  }
}

var borderStyle = lineStyle_global;

function borderStyle2(tb, lr) {
  return lineStyle(tb) + " " + lineStyle(lr);
}

function borderStyle3(top, lr, bottom) {
  return lineStyle(top) + " " + lineStyle(lr) + " " + lineStyle(bottom);
}

function borderStyle4(top, right, bottom, left) {
  return lineStyle(top) + " " + lineStyle(right) + " " + lineStyle(bottom) + " " + lineStyle(left);
}

var borderWidth = lineWidth_global;

function borderWidth2(tb, lr) {
  return lineWidth(tb) + " " + lineWidth(lr);
}

function borderWidth3(top, lr, bottom) {
  return lineWidth(top) + " " + lineWidth(lr) + " " + lineWidth(bottom);
}

function borderWidth4(top, right, bottom, left) {
  return lineWidth(top) + " " + lineWidth(right) + " " + lineWidth(bottom) + " " + lineWidth(left);
}

var borderColor = color_global;

function borderColor2(tb, lr) {
  return color(tb) + " " + color(lr);
}

function borderColor3(top, lr, bottom) {
  return color(top) + " " + color(lr) + " " + color(bottom);
}

function borderColor4(top, right, bottom, left) {
  return color(top) + " " + color(right) + " " + color(bottom) + " " + color(left);
}

var color$1 = color_global;

var clear$1 = clear_global;

var cursor = cursorKeyword_global;

function cursor1(i, k) {
  return cursorImage(i) + ", " + cursorKeyword(k);
}

function cursor2(i1, i2, k) {
  return cursorImage(i1) + ", " + cursorImage(i2) + ", " + cursorKeyword(k);
}

function cursor3(i1, i2, i3, k) {
  return cursorImage(i1) + ", " + cursorImage(i2) + ", " + cursorImage(i3) + ", " + cursorKeyword(k);
}

function cursor4(i1, i2, i3, i4, k) {
  return cursorImage(i1) + ", " + cursorImage(i2) + ", " + cursorImage(i3) + ", " + cursorImage(i4) + ", " + cursorKeyword(k);
}

var fontFamily$1 = fontFamily_global;

function fontFamily2(v1, v2) {
  return fontFamily(v1) + ", " + fontFamily(v2);
}

function fontFamily3(v1, v2, v3) {
  return fontFamily(v1) + ", " + fontFamily(v2) + ", " + fontFamily(v3);
}

function fontFamily4(v1, v2, v3, v4) {
  return fontFamily(v1) + ", " + fontFamily(v2) + ", " + fontFamily(v3) + ", " + fontFamily(v4);
}

var fontWeight$1 = fontWeight_global;

var margin$1 = margin_global;

function margin2(tb, lr) {
  return margin(tb) + " " + margin(lr);
}

function margin3(top, lr, bottom) {
  return margin(top) + " " + margin(lr) + " " + margin(bottom);
}

function margin4(top, right, bottom, left) {
  return margin(top) + " " + margin(right) + " " + margin(bottom) + " " + margin(left);
}

var padding$1 = padding_global;

function padding2(tb, lr) {
  return length_percentage(tb) + " " + length_percentage(lr);
}

function padding3(top, lr, bottom) {
  return length_percentage(top) + " " + length_percentage(lr) + " " + length_percentage(bottom);
}

function padding4(top, right, bottom, left) {
  return length_percentage(top) + " " + length_percentage(right) + " " + length_percentage(bottom) + " " + length_percentage(left);
}

var Property = {
  background: background,
  background2: background2,
  background3: background3,
  background4: background4,
  backgroundAttachment: backgroundAttachment,
  backgroundAttachment2: backgroundAttachment2,
  backgroundAttachment3: backgroundAttachment3,
  backgroundAttachment4: backgroundAttachment4,
  backgroundColor: backgroundColor,
  backgroundImage: backgroundImage,
  backgroundImage2: backgroundImage2,
  backgroundImage3: backgroundImage3,
  backgroundImage4: backgroundImage4,
  backgroundPosition: backgroundPosition,
  backgroundPosition2: backgroundPosition2,
  backgroundPosition3: backgroundPosition3,
  backgroundPosition4: backgroundPosition4,
  backgroundStyle: backgroundStyle,
  backgroundStyle2: backgroundStyle2,
  backgroundStyle3: backgroundStyle3,
  backgroundStyle4: backgroundStyle4,
  border: border,
  borderStyle: borderStyle,
  borderStyle2: borderStyle2,
  borderStyle3: borderStyle3,
  borderStyle4: borderStyle4,
  borderWidth: borderWidth,
  borderWidth2: borderWidth2,
  borderWidth3: borderWidth3,
  borderWidth4: borderWidth4,
  borderColor: borderColor,
  borderColor2: borderColor2,
  borderColor3: borderColor3,
  borderColor4: borderColor4,
  color: color$1,
  clear: clear$1,
  cursor: cursor,
  cursor1: cursor1,
  cursor2: cursor2,
  cursor3: cursor3,
  cursor4: cursor4,
  fontFamily: fontFamily$1,
  fontFamily2: fontFamily2,
  fontFamily3: fontFamily3,
  fontFamily4: fontFamily4,
  fontWeight: fontWeight$1,
  margin: margin$1,
  margin2: margin2,
  margin3: margin3,
  margin4: margin4,
  padding: padding$1,
  padding2: padding2,
  padding3: padding3,
  padding4: padding4
};

var Data = {
  $$global: $$global,
  str: str,
  num: num,
  $$int: $$int,
  pct: pct,
  percentage: percentage,
  ratio: ratio,
  fr: fr,
  flexUnit: flexUnit,
  ch: ch,
  em: em,
  ex: ex,
  rem: rem,
  vh: vh,
  vw: vw,
  vmin: vmin,
  vmax: vmax,
  px: px,
  cm: cm,
  mm: mm,
  inch: inch,
  pc: pc,
  pt: pt,
  length: length,
  s: s,
  ms: ms,
  time: time,
  deg: deg,
  grad: grad,
  rad: rad,
  turn: turn,
  angle: angle,
  hz: hz,
  kHz: kHz,
  frequency: frequency,
  dpi: dpi,
  dpcm: dpcm,
  dppx: dppx,
  x: x,
  resolution: resolution,
  length_percentage: length_percentage,
  frequency_percentage: frequency_percentage,
  angle_percentage: angle_percentage,
  time_percentage: time_percentage,
  lineWidth: lineWidth,
  lineWidth_global: lineWidth_global,
  lineStyle: lineStyle,
  lineStyle_global: lineStyle_global,
  transformOrigin: transformOrigin,
  hue: hue,
  alpha: alpha,
  rgbParam: rgbParam,
  hsl: hsl,
  hsla: hsla,
  rgb: rgb,
  rgba: rgba,
  hexColor: hexColor,
  colorKeyword: colorKeyword,
  color: color,
  color_global: color_global,
  gradientLineStartingPoint: gradientLineStartingPoint,
  gradientLineAngle: gradientLineAngle,
  linearColorStop: linearColorStop,
  linearGradient: linearGradient,
  repeatingLinearGradient: repeatingLinearGradient,
  radialGradient: radialGradient,
  repeatingRadialGradient: repeatingRadialGradient,
  conicGradient: conicGradient,
  repeatingConicGradient: repeatingConicGradient,
  gradient: gradient,
  imageTags: imageTags,
  url: url,
  imageSrc: imageSrc,
  image: image,
  bgImage: bgImage,
  bgImage_global: bgImage_global,
  bgSize: bgSize,
  position: position,
  position_global: position_global,
  repeatStyle: repeatStyle,
  repeatStyle_global: repeatStyle_global,
  attachment: attachment,
  attachment_global: attachment_global,
  box: box,
  bg: bg,
  bgLayer: bgLayer,
  margin: margin,
  margin_global: margin_global,
  padding: padding,
  padding_global: padding_global,
  clear: clear,
  clear_global: clear_global,
  cursorKeyword: cursorKeyword,
  cursorKeyword_global: cursorKeyword_global,
  cursorImage: cursorImage,
  fontWeight: fontWeight,
  fontWeight_global: fontWeight_global,
  genericFontFamilyName: genericFontFamilyName,
  fontFamily: fontFamily,
  fontFamily_global: fontFamily_global
};

exports.Data = Data;
exports.Property = Property;
/* No side effect */
