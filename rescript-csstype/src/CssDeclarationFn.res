type t<'data> = (string, CssDeclarationFnConstructor.boxValue<'data>);

let make = declaration => {
  switch declaration {
  | #PropertyFn(name, value) => (name, value)
  | #BorderFn(value) => ("border", CssDeclarationFnConstructor.BoxValue(value))
  | #BorderTopFn(value) => ("borderTop", CssDeclarationFnConstructor.BoxValue(value))
  | #BorderRightFn(value) => ("borderRight", CssDeclarationFnConstructor.BoxValue(value))
  | #BorderBottomFn(value) => ("borderBottom", CssDeclarationFnConstructor.BoxValue(value))
  | #BorderLeftFn(value) => ("borderLeft", CssDeclarationFnConstructor.BoxValue(value))
  | #BorderStyleFn(value) => ("border", CssDeclarationFnConstructor.BoxValue(value))
  | #BorderTopStyleFn(value) => ("borderTopStyle", CssDeclarationFnConstructor.BoxValue(value))
  | #BorderRightStyleFn(value) => ("borderRightStyle", CssDeclarationFnConstructor.BoxValue(value))
  | #BorderBottomStyleFn(value) => ("borderBottomStyle", CssDeclarationFnConstructor.BoxValue(value))
  | #BorderLeftStyleFn(value) => ("borderLeftStyle", CssDeclarationFnConstructor.BoxValue(value))
  | #BorderWidthFn(value) => ("boderWidth", CssDeclarationFnConstructor.BoxValue(value))
  | #BorderTopWidthFn(value) => ("borderTopWidth", CssDeclarationFnConstructor.BoxValue(value))
  | #BorderRightWidthFn(value) => ("borderRightWidth", CssDeclarationFnConstructor.BoxValue(value))
  | #BorderBottomWidthFn(value) => ("borderBottomWidth", CssDeclarationFnConstructor.BoxValue(value))
  | #BorderLeftWidthFn(value) => ("borderLeftWidth", CssDeclarationFnConstructor.BoxValue(value))
  | #BorderColorFn(value) => ("borderColor", CssDeclarationFnConstructor.BoxValue(value))
  | #BorderTopColorFn(value) => ("borderTopColor", CssDeclarationFnConstructor.BoxValue(value))
  | #BorderRightColorFn(value) => ("borderRightColor", CssDeclarationFnConstructor.BoxValue(value))
  | #BorderBottomColorFn(value) => ("borderBottomColor", CssDeclarationFnConstructor.BoxValue(value))
  | #BorderLeftColorFn(value) => ("borderLeftColor", CssDeclarationFnConstructor.BoxValue(value))
  | #BackgroundFn(value) => ("background", CssDeclarationFnConstructor.BoxValue(value))
  | #BackgroundAttachmentFn(value) => ("backgroundAttachment", CssDeclarationFnConstructor.BoxValue(value))
  | #BackgroundColorFn(value) => ("backgroundColor", CssDeclarationFnConstructor.BoxValue(value))
  | #BackgroundImageFn(value) => ("backgroundImage", CssDeclarationFnConstructor.BoxValue(value)) 
  | #BackgroundPositionFn(value) => ("backgroundPosition", CssDeclarationFnConstructor.BoxValue(value))
  | #BackgroundStyleFn(value) => ("backgroundStyle", CssDeclarationFnConstructor.BoxValue(value))
  | #MarginFn(value) => ("margin", CssDeclarationFnConstructor.BoxValue(value))
  | #MarginTopFn(value) => ("marginTop", CssDeclarationFnConstructor.BoxValue(value))
  | #MarginRightFn(value) => ("marginRight", CssDeclarationFnConstructor.BoxValue(value))
  | #MarginBottomFn(value) => ("marginBottom", CssDeclarationFnConstructor.BoxValue(value))
  | #MarginLeftFn(value) => ("marginLeft", CssDeclarationFnConstructor.BoxValue(value))
  | #PaddingFn(value) => ("padding", CssDeclarationFnConstructor.BoxValue(value))
  | #PaddingTopFn(value) => ("paddingTop", CssDeclarationFnConstructor.BoxValue(value))
  | #PaddingBottomFn(value) => ("paddingBottom", CssDeclarationFnConstructor.BoxValue(value))
  | #PaddingRightFn(value) => ("paddingRight", CssDeclarationFnConstructor.BoxValue(value))
  | #PaddingLeftFn(value) => ("paddingLeft", CssDeclarationFnConstructor.BoxValue(value))
  | #ColorFn(value) => ("color", CssDeclarationFnConstructor.BoxValue(value))
  | #ClearFn(value) => ("clear", CssDeclarationFnConstructor.BoxValue(value))
  | #CursorFn(value) => ("cursor", CssDeclarationFnConstructor.BoxValue(value))
  | #FontWeightFn(value) => ("fontWeight", CssDeclarationFnConstructor.BoxValue(value))
  | #FontFamilyFn(value) => ("fontFamily", CssDeclarationFnConstructor.BoxValue(value))
  };
};