// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';


function Make($star) {
  var make = function (declaration) {
    var variant = declaration.NAME;
    if (variant === "FontFamilyFn") {
      return [
              "fontFamily",
              declaration.VAL
            ];
    }
    if (variant === "BorderTopWidthFn") {
      return [
              "borderTopWidth",
              declaration.VAL
            ];
    }
    if (variant === "PaddingLeftFn") {
      return [
              "paddingLeft",
              declaration.VAL
            ];
    }
    if (variant === "PaddingBottomFn") {
      return [
              "paddingBottom",
              declaration.VAL
            ];
    }
    if (variant !== "PropertyFn") {
      if (variant === "MarginBottomFn") {
        return [
                "marginBottom",
                declaration.VAL
              ];
      } else if (variant === "BackgroundImageFn") {
        return [
                "backgroundImage",
                declaration.VAL
              ];
      } else if (variant === "BackgroundFn") {
        return [
                "background",
                declaration.VAL
              ];
      } else if (variant === "BackgroundAttachmentFn") {
        return [
                "backgroundAttachment",
                declaration.VAL
              ];
      } else if (variant === "BorderLeftWidthFn") {
        return [
                "borderLeftWidth",
                declaration.VAL
              ];
      } else if (variant === "BorderRightColorFn") {
        return [
                "borderRightColor",
                declaration.VAL
              ];
      } else if (variant === "BorderColorFn") {
        return [
                "borderColor",
                declaration.VAL
              ];
      } else if (variant === "BorderBottomColorFn") {
        return [
                "borderBottomColor",
                declaration.VAL
              ];
      } else if (variant === "BackgroundPositionFn") {
        return [
                "backgroundPosition",
                declaration.VAL
              ];
      } else if (variant === "FontWeightFn") {
        return [
                "fontWeight",
                declaration.VAL
              ];
      } else if (variant === "ClearFn") {
        return [
                "clear",
                declaration.VAL
              ];
      } else if (variant === "BorderRightStyleFn") {
        return [
                "borderRightStyle",
                declaration.VAL
              ];
      } else if (variant === "BorderStyleFn") {
        return [
                "border",
                declaration.VAL
              ];
      } else if (variant === "BorderBottomStyleFn") {
        return [
                "borderBottomStyle",
                declaration.VAL
              ];
      } else if (variant === "BorderTopFn") {
        return [
                "borderTop",
                declaration.VAL
              ];
      } else if (variant === "BorderTopColorFn") {
        return [
                "borderTopColor",
                declaration.VAL
              ];
      } else if (variant === "BackgroundColorFn") {
        return [
                "backgroundColor",
                declaration.VAL
              ];
      } else if (variant === "PaddingTopFn") {
        return [
                "paddingTop",
                declaration.VAL
              ];
      } else if (variant === "CursorFn") {
        return [
                "cursor",
                declaration.VAL
              ];
      } else if (variant === "PaddingFn") {
        return [
                "padding",
                declaration.VAL
              ];
      } else if (variant === "BorderRightFn") {
        return [
                "borderRight",
                declaration.VAL
              ];
      } else if (variant === "BorderBottomFn") {
        return [
                "borderBottom",
                declaration.VAL
              ];
      } else if (variant === "BorderTopStyleFn") {
        return [
                "borderTopStyle",
                declaration.VAL
              ];
      } else if (variant === "BackgroundStyleFn") {
        return [
                "backgroundStyle",
                declaration.VAL
              ];
      } else if (variant === "MarginFn") {
        return [
                "margin",
                declaration.VAL
              ];
      } else if (variant === "MarginRightFn") {
        return [
                "marginRight",
                declaration.VAL
              ];
      } else if (variant === "BorderLeftColorFn") {
        return [
                "borderLeftColor",
                declaration.VAL
              ];
      } else if (variant === "BorderRightWidthFn") {
        return [
                "borderRightWidth",
                declaration.VAL
              ];
      } else if (variant === "BorderWidthFn") {
        return [
                "boderWidth",
                declaration.VAL
              ];
      } else if (variant === "PaddingRightFn") {
        return [
                "paddingRight",
                declaration.VAL
              ];
      } else if (variant === "BorderBottomWidthFn") {
        return [
                "borderBottomWidth",
                declaration.VAL
              ];
      } else if (variant === "BorderFn") {
        return [
                "border",
                declaration.VAL
              ];
      } else if (variant === "BorderLeftStyleFn") {
        return [
                "borderLeftStyle",
                declaration.VAL
              ];
      } else if (variant === "ColorFn") {
        return [
                "color",
                declaration.VAL
              ];
      } else if (variant === "MarginLeftFn") {
        return [
                "marginLeft",
                declaration.VAL
              ];
      } else if (variant === "BorderLeftFn") {
        return [
                "borderLeft",
                declaration.VAL
              ];
      } else {
        return [
                "marginTop",
                declaration.VAL
              ];
      }
    }
    var match = declaration.VAL;
    return [
            match[0],
            match[1]
          ];
  };
  return {
          make: make
        };
}

exports.Make = Make;
/* No side effect */
